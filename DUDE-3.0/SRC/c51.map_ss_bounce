#!/bin/csh
# EJG/PL March 2010
# 
#===========================================================
#                      c51.map_ss_bounce
#===========================================================
# this script uses GMT and the taup toolkit
# to plot a map with all SS surface bounce points along
# a dVs tomography model at 150 km depth


# INPUT:  (1) station/event location info and distances from
# -----       master info file
#         (2) shear velocity values from a tomography model
#         (3) some directory location info

set EVENT     = $1
set DIRSRC    = $2
set DIRDATA   = $3
set DIRPLOT   = $4


# OUTPUT:  (1) postscript plot map
# -------  (2) columns for  "more_info" file of SS bounce
#              points info for possible later use

set OUTFILE = $DIRPLOT/$EVENT.c51.map_SS_bounce.ps


# go to the data directory
set DIRPWD = ` pwd `
cd $DIRDATA/$EVENT

# source env variable script
source $DIRSRC/c0.ENV_setting

# define the master file location / name
set MASTER = $DIRDATA/$EVENT/eventStation.$EVENT

# loose the label line
awk ' NR>1 {print $0}'  $MASTER >! INFIL

# define event coords and mag
set COORDS = ` awk ' NR==1 {print $11,$12,$13,$16}' INFIL `
set NSTA   = ` wc -l INFIL | awk '{print $1}' `
set ELAT   = $COORDS[1] 
set ELON   = $COORDS[2] 
set EZ     = $COORDS[3] 
set EMAG   = $COORDS[4] 

# output file for things we make. here: SS surface reflection pts:
if(-e eventStation.$EVENT.more_info) then
    @ INFOFLG = 1
    # first see if we already made SS bounce points,
    # since file might exist from other activities.
    # look for the header variable to the x coord.
    # use this flag later to either read them or make them
    @ DIDIT = ` grep -c xSS eventStation.$EVENT.more_info `
else
    @ DIDIT   = 0
    @ INFOFLG = 0
endif

# make an event lat/lon file:
echo $ELAT $ELON >! xy.eq

if (-e xy.gcpaths ) \rm xy.gcpaths
if (-e xy.stations ) \rm xy.stations
if (-e xy.stations ) \rm xy.ss_bounce

# If we have not already made SS reflection points, make them, and put
# output into (a) file for plotting, and (b) our "more_info" file


if($DIDIT == 0) then

   # we're inside here because we have to make the reflection points
   # define a min max distance for our SS hunt.
   # subjective choice here.  our main concern is
   # to start at a distance beyond all the upper
   # mantle triplication distances.  Many SS
   # researchers will look no closer than 50 deg.
   # that's what we will use:
   set RSSMIN = 50      # units: deg
   set RSSMAX = 180     # units: deg
   
   # we will make some files:
   # (a) make a file that contains the great circle path information,
   #     i.e., the event lat/lon, station lat/lon, and GMT delimeter (">")
   # (b) make a file that contains station lat/lons
   # (c) make 2 files that relate to SS reflection pt lat/lons
   
   if (-e xy.ss_bounce ) \rm xy.ss_bounce
   if (-e xy.ss_info ) \rm xy.ss_info
   # make the header line in our temp info file 
   echo "ySS     xSS" >! xy.ss_info
   
   # loop through stations to calc bounce points
   @ m = 1
   while ( $m <= $NSTA )
   
        # get distance to test if in our dist range of interest:
        set DIST = ` awk ' NR=='$m' {print $3 }' INFIL `
   
        # if in dist bound compute bounce points
        set DISTFLG = ` echo $DIST $RSSMIN $RSSMAX | awk ' $1 >= $2 && $1 <= $3 {print "Y"}' `
        if($DISTFLG == 'Y' ) then

             # add to great circle path plot file
             echo '>' >>! xy.gcpaths
             echo $ELAT $ELON >>! xy.gcpaths
             set XYSTA = ` awk ' NR=='$m' {print $9,$10} ' INFIL `
             echo $XYSTA[1] $XYSTA[2] >>! xy.gcpaths
    
             # add to station coord plot file
             echo $XYSTA[1] $XYSTA[2] >>! xy.stations

             # now we need to compute (using TauP Toolkit) the SS surface
             # reflection point, then put them in a plot file and the info file.
             # beware: this next step takes a moment (a station or 2 per second)
             taup_pierce -mod prem -sta $XYSTA[1] $XYSTA[2] -evt $ELAT $ELON \
                 -h $EZ -pierce 0 -nodiscon -ph SS | awk ' NR==2 {print $4,$5}' \
                  >! xy.ss_tmp
             set XYSS = ` awk ' {print $0} ' xy.ss_tmp `
             echo $XYSS[1] $XYSS[2] >>!  xy.ss_bounce
             echo $XYSS[1] $XYSS[2] >>!  xy.ss_info
   
        else
   
          # we are not in the distance bound so we will
             # put a "null" into the lat lon spots of the info file
             echo null null >>!  xy.ss_info
        endif

        @ m++

   end   # end of while loop thru stations

   # add our new info to more_info file
   if($INFOFLG == 1 ) then
       # add our files to existing files in the info file
       paste eventStation.$EVENT.more_info xy.ss_info >! newinfo
       mv newinfo eventStation.$EVENT.more_info
   else
       # intiate the info file with our new info
       mv xy.ss_info eventStation.$EVENT.more_info
   endif

else

   # we are here because SS bounce points already exist in info file
   # just need to grab all the info and make new "xy." files. 
   # there are 2 possibilities: our desired info are the only 2
   # columns in the info file (easiest) or there are other columns
   # of things there, and we need to find our columns of interest

   #  first: check to see if there are only 2 columns, if not
   # we find the right columns, then proceed
   @ ncol = ` awk ' NR==1 { print NF-1 }' eventStation.$EVENT.more_info `
   if($ncol == 1) then
       # simply grab the XY info, as is
       awk ' { print $1, $2}' eventStation.$EVENT.more_info >! xy.ss_info
   else
       # we have to find correct columns with xSS and ySS info.
       # i'm an awk moron, so this is brute force...
       set search = xSS
       # we look column by column for 'search' var, xSS
       @ x = 1
       while($x <= $ncol)
           @ v = $x + 1
           set header = ` awk ' NR==1  {print $'$x' }' eventStation.$EVENT.more_info `
           if($header == $search) then
                # if were here, we found the column, make our file and get out
                awk ' { print $'$v', $'$x'}' eventStation.$EVENT.more_info >! xy.ss_info
                @ x = 999
           endif
           @ x++
       end
   endif

   # paste the xy.ss_info onto our eventStation file, so we can get the
   # sta coords and ss bnc pt coords, after nuking the lines w/ "nulls/
   paste $MASTER xy.ss_info >! eventStation.tmp

   # now, keep only the stations that have info, i.e., non-nulls:
   grep -v null eventStation.tmp >! INFIL0
   awk 'NR>1 { print $0 }' INFIL0 >! INFIL
   \rm INFIL0

   # count them
   set NSTA   = ` wc -l INFIL | awk '{print $1}' `

   # now loop through, line by line and make all the xy. files:
   @ m = 1
   while ( $m <= $NSTA )

       # add to great circle path plot file
       echo '>' >>! xy.gcpaths
       echo $ELAT $ELON >>! xy.gcpaths
       set XYSTA = ` awk ' NR=='$m' {print $9,$10} ' INFIL `
       echo $XYSTA[1] $XYSTA[2] >>! xy.gcpaths
   
       # add to station coord plot file
       echo $XYSTA[1] $XYSTA[2] >>! xy.stations
   
       # add to bounce point plot file
       set XYSS = ` awk ' NR=='$m' {print $19,$20} ' INFIL `
       echo $XYSS[1] $XYSS[2] >>! xy.ss_bounce
 
       @ m++
   end

endif    # end of if loop to make bounce points


#==============================================================
#                  plotting time!
#==============================================================

# define the GMT plot bounds and size:
set REG = -R-180/180/-90/90
set PROJ = -JR$ELON/7.0i

# first we will plot the tomography model.  i will choose
# Jeroen Ritsema's 2000  model

# first we convert the (x,y,dVs) ascii file in the src directory
# to GMT binary, a "grd" file:
xyz2grd $DIRSRC/ritsema.0150 -G0150.grd -I2 $REG -V -:

# now plot the grd file w/ gmt's 'grdimage'.  the color
# palette table "cpt" already exists, in the src directory
set CPT = -C$DIRSRC/ritsema.cpt
grdimage 0150.grd $CPT $REG $PROJ -E40 -K -P -V -X0.70i -Y5.5i >! $OUTFILE

# add a color scale to the right for the tomography map
psscale $CPT -D3.5i/-0.2i/3.0i/0.13ih -B2/:"@~\144@~Vs (%)": -V -O -K -N300 >> $OUTFILE

# finally, we can now plot the coast lines
pscoast $REG $PROJ -Ba0g45/a0g45wsne -Dl -A40000 -W2 -V -P -O -K >> $OUTFILE

# then plot the great circle path file
psxy xy.gcpaths $REG $PROJ -: $MGMT -K -O -W1.0/250/0/200t5_15:0 >> $OUTFILE

# now plot the EQ and stations
psxy xy.eq       $REG $PROJ -: -Sa0.12i -K -O -W1/0/0/0 -G0 >> $OUTFILE
psxy xy.stations $REG $PROJ -: -St0.03i -K -O -W1/0/0/0 -G0 >> $OUTFILE

# now plot the SS bounce points:
psxy xy.ss_bounce $REG $PROJ -: -S+0.15i -K -O -W3/yellow  >> $OUTFILE

# plot the text of the title,
# also, plot a big title at top of page:
# first, break apart event name for Big Title:
set YYYY = ` echo $EVENT | cut -c1-4 `
set MM   = ` echo $EVENT | cut -c5-6 `
set DD   = ` echo $EVENT | cut -c7-8 `
set HH   = ` echo $EVENT | cut -c9-10 `
set MIN  = ` echo $EVENT | cut -c11-12 `

# plot a title above the top of the globe
# and plot the big title of the date higher up:
# big title first
pstext $REG $PROJ -N -O -K -Y0.8i << END >> $OUTFILE
$ELON 90 20 0 0 CB ${MM}/${DD}/$YYYY ${HH}:${MIN} SS surface reflection points
END
# now littler title:
pstext $REG $PROJ -N -O -K -Y-0.6i << END >> $OUTFILE
$ELON 90 14 0 0 CB $EVENT  LAT=$ELAT LON=$ELON Z=$EZ Mb=$EMAG NSTA=$NSTA
END
# add ab info line about the tomog model
pstext $REG $PROJ -N -O  -Y-5.3i << END >> $OUTFILE
$ELON 90 12 0 0 CB Tomography model:  S20RTS (Ritsema) Z=150 km
END

# some clean up
\rm xy.eq xy.station* xy.gcpaths xy.ss_bounce .gmt* 0150.grd
\rm INFIL eventStation.tmp
if(-e xy.ss_info) \rm xy.ss_info
if(-e xy.ss_tmp) \rm xy.ss_tmp


# message to screen we're done this this file
echo "c51.map_ss_bounce: just finished making PLOT FILE : $OUTFILE"


# return to our pwd
cd $DIRPWD
