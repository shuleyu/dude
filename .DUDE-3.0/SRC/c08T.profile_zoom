#!/bin/csh
# EJG/PL March 2010
# 
#===========================================================
#                      c08T.profile_zoom 
#
#  {exactly like c08.profile_zoom, with added feature of
#   automatic determination of min/max distance}
#===========================================================

# this script makes record sections that are aligned on 
# some seismic phase of interest.  we first make a list
# of records that we wish to profile, then feed them to
# a fortran 90 code to convert SAC fmt files to ascii, 
# after some quick processing in SAC, then plot the 
# result with GMT.  
#
# the f90 code was written by Pei-ying (Patty) Lin at
# ASU. any errors are undoubtedly mine, as I modified things.

# INPUT:  (1) station/event location info and distances from
# -----       master info file
#         (2) plot box bounds: Dist min/max, time min/max
#         (3) some directory location information
#         (4) reference phase of interest, and component
#             of motion for plotting


# OUTPUT:  (1) postscript plot for phase_comp
# -----    (2) postscript plot for phase_comp, low passed
#
# KNOWN BUG
# the fortran code that grabs information from
# the SAC files complains about some of the SAC
# header fields having undefined values.  But
# this is some kind of a protocol bug and does 
# not affect any output.  The error scrolls to
# standard out as, for example:
# "ERROR 1336: Undefined header field value. KT6"
 
echo " "
echo "-------------------------------------------------------------"
echo "                c08.profile_zoom: STARTING"
echo "-------------------------------------------------------------"

set EVENT     = $1
set DIRSRC    = $2
set DIRDATA   = $3
set DIRPLOT   = $4
set DISTMIN   = $5
set DISTMAX   = $6
set TIMEMIN   = $7
set TIMEMAX   = $8
set PHASE     = $9
set COMP      = $10

# go to the data directory
set DIRPWD = ` pwd `
cd $DIRDATA/$EVENT

# source the environment variables
source $DIRSRC/c0.ENV_setting

# define the master file location / name
set MASTER = $DIRDATA/$EVENT/eventStation.$EVENT

# check to see if script is to compute distance bounds
# for plot.  If DISTMIN = -1, code does it.  If yes,
# code will add +/- 10% of distance range of data
set CHECK = ` echo $DISTMIN | awk ' $1<0 { print "Y"}' `
if($CHECK == Y ) then
   set MINMAX = ( ` awk '{print $3}' $MASTER | minmax -C ` )
   set DISTMIN = ` echo $MINMAX | awk '{print int($1 - 0.1*($2 - $1))}' `
   set DISTMAX = ` echo $MINMAX | awk '{print int($2 + 0.1*($2 - $1))}' `
endif

# loose the header line, and distance out of our range:
awk ' NR>1 && $3>='$DISTMIN' && $3<='$DISTMAX' {print $0}' $MASTER >! INFIL

# define event coords and mag
set COORDS = ` awk ' NR==1 {print $11,$12,$13,$16}' INFIL `
set NSTA   = ` wc -l INFIL | awk '{print $1}' `
set ELAT   = $COORDS[1] 
set ELON   = $COORDS[2] 
set EZ     = $COORDS[3] 
set EMAG   = $COORDS[4] 

# plot Z, and R, and T as separate plots.  We will also
# do a band pass filter (in SAC). We will make two
# versions: raw and low pass filtered.
# thus we are making 6 plots: Z, R, T raw, and Z,
# R, T low passed.

# define the corners for the "raw" data in the band
# pass filter.  this is here for those that wish
# to get rid of the long period noise in the traces
# do it with a band pass, thus, 2 corners needed. 
set B1 = 0.01
set B2 = 1.0

# define the low pass corner:
set F = 0.05

# make the awkfile that will be run by SAC. it is
# basically how we will precondition our records before
# our fortran90 code that converts to ascii:
echo "c08.profile_zoom: making the SAC macro"
cat << EOF >! awkfile
{
print "r *." \$1 ".?H${COMP}.sac"  
print "rmean" 
print "rtr" 
print "taper" 
print "bp co $B1 $B2 n 2 p 2" 
print "interp d 0.05"
print "w " \$1".$COMP " 
print "lp co $F n 2 p 2" 
print "w " \$1".${COMP}lp" 
} 
EOF

# make the sac macro now, using our awkfile
awk -f awkfile INFIL >! $EVENT.m.process

echo "c08.profile_zoom: running the SAC macro"
# run the sac macro
sac << END >! out.sac
m $EVENT.m.process
quit
END

# make list of seismograms, for our f90 code
ls *.${COMP} >! ${COMP}.LIST
ls *.${COMP}lp >! ${COMP}lp.LIST

# time to convert files to ASCII, using an f90 code
# written by Pei-ying (Patty) Lin, PhD student in the
# geophysics/seismology group at ASU. code sac2xyzoom.f90
# makes output called "xy.seismograms".
# amplitude scaling is pre-determined, but can be
# changed with AMPSCALE:
set AMPSCALE = 1.0

# compile code:
#$FCOMP -m32 -I$DIRSRC $DIRSRC/sac2xyzoom.f90 $SACLIBs -o SAC2XYZOOM
$FCOMP -I$DIRSRC $DIRSRC/sac2xyzoom.f90 $SACLIBs -o SAC2XYZOOM

# run the code
foreach TYPE ( $COMP ${COMP}lp )

echo "c08.profile_zoom: converting $TYPE SAC files to XY"
SAC2XYZOOM << EOF >! out.sac2xyzoom
$PHASE
$TIMEMIN $TIMEMAX
$DISTMIN $DISTMAX
$AMPSCALE
$TYPE.LIST
EOF
mv xy.seismograms xy.$TYPE.seismograms
end
# note: the output is a big file

#===========================================================
#             PLOTTING TIME!!!
#===========================================================

echo "c08T.profile_zoom: starting to make PLOT FILES"

# plot the text of the title,
# also, plot a big title at top of page:
# first, break apart event name for Big Title:
set YYYY = ` echo $EVENT | cut -c1-4 `
set MM   = ` echo $EVENT | cut -c5-6 `
set DD   = ` echo $EVENT | cut -c7-8 `
set HH   = ` echo $EVENT | cut -c9-10 `
set MIN  = ` echo $EVENT | cut -c11-12 `

# plot size (the f90 sac2xy code assumes these are the dimensions
# we are working with)
set XSIZE = 6
set YSIZE = 8.5 

# crunch some axis attributes for plot:
# well put dist on horiz axis, and time on vertical
#set BX    = `echo $TIMEMIN $TIMEMAX | awk '{print (int(int(($2-$1)/10)/50)+1)*50 }' | awk '{print $1, $1/5}'`
set BX    = `echo $TIMEMIN $TIMEMAX | awk '{print $2-$1}' | awk '{ if ( $1/100 >= 20 ) {print 500,100} else if ( $1/100 < 10 ) {print 100, 10} else {print 200, 20} }'`
set BY    = `echo $DISTMIN $DISTMAX | awk '{print (int(int(($2-$1)/10)/5)+1)*5 }' |  awk '{print $1, $1/5}'`
set SCALE = X"$XSIZE"i/"$YSIZE"i
#set SCALE = X"$XSIZE"i/-"$YSIZE"i
set RANGE = $TIMEMIN/$TIMEMAX/$DISTMIN/$DISTMAX
set BAXIS = a"$BX[1]"f"$BX[2]"/a"$BY[1]"f"$BY[2]"
set Y0 = -Y1.5i

# now build the plots, one type at a time
foreach TYPE ( $COMP ${COMP}lp )

# define the output file
set OUTFILE = $DIRPLOT/$EVENT.c08T.profile_zoom.$PHASE.$TYPE.ps

# plot some text
pstext -Jx1i -R0/6/0/9 -K -N -P $Y0 << END >! $OUTFILE
3.0 9.3 20  0 0 CB Event: ${MM}/${DD}/$YYYY ${HH}:${MIN} Phase=$PHASE Comp=$TYPE
3.0 9.0 15  0 0 CB $EVENT  LAT=$ELAT LON=$ELON Z=$EZ Mb=$EMAG NSTA=$NSTA
-0.5 4.5 15 90 0 CB Distance (deg)
3.0 -0.7 15  0 0 CB Time after PREM ${PHASE}-wave time (sec)
END

# more text: script name and time stamp
echo "3.0 8.7 10 0 0 CB SCRIPT: c08T.profile_zoom" >! datetag1
date "+CREATION DATE: %m/%d/%y  %H:%M:%S" >! datetag2
paste datetag1 datetag2 >! datetag3
pstext datetag3 -Jx -R -N -Wored -G0 -O -K >> $OUTFILE

# initiate coords for traces and curves
psbasemap -J$SCALE -R$RANGE -B"$BAXIS"WSne -K -O -P >> $OUTFILE

# plot the records
psxy xy.$TYPE.seismograms -J$SCALE -R$RANGE -W0.005i/0 $MGMT -O -K >> $OUTFILE

#===========================================================
# travel time curve stuff
#===========================================================

/bin/rm -rf  $DIRDATA/$EVENT/TC
mkdir $DIRDATA/$EVENT/TC
cd $DIRDATA/$EVENT/TC
cp ../.taup .

# here we make travel time curves with taup
# here, we make them in groups, for different color coding in the
# profile plots that follow. note: the plot gets pretty busy
# pretty quickly, so i don't have all possibilities being plotted
echo "Computing travel time curves"
set MODEL     =   prem
set Pgroup    =  ( P PcP PP PKP PKIKP PKiKP Pdiff PKKP PPP )
set pPgroup   =  ( pP pPdiff pPP pPcP)
set Sgroup    =  ( S Sdiff SS SSS SSSS  )
set SVgroup   =  ( SKS SKKS SKKKS )
set SHgroup   =  ( ScS ScSScS )
set sSgroup   =  ( sS sSdiff sSS sSSS  )
set sSVgroup   = ( sSKS sSKKS )
set sSHgroup   = ( sSdiff sScS )
set sPgroup   =  ( sP sPdiff )
set pSgroup   =  ( pS pSS pSdiff pSKS pSKKS )
set SPgroup   =  ( ScP SP PS PcS SKP PKS )
set pSPgroup  =  ( pScP pPS )

# compile code:
$FCOMP $DIRSRC/taupTC_text.f90 -o taupTC_text
$FCOMP $DIRSRC/random_num.f90 -o random_num

# plot size (the f90 sac2xy code assumes these are the dimensions
# we are working with)
set ddist0 = `echo $DISTMAX $DISTMIN | awk '{print 0.03*($1-$2)}' `

set iEZ = `echo $EZ | awk '{printf "%d\n",$1}'`
if ( $iEZ <= 50 ) then
   set GROUPlist = ( SPgroup Sgroup SHgroup SVgroup Pgroup )
else 
   set GROUPlist = ( pSPgroup pSgroup sPgroup SPgroup sSgroup sSHgroup sSVgroup pPgroup Sgroup SHgroup SVgroup Pgroup )
endif
   
# plot travel time curves
cat << EOF >! pstext.temp
EOF
set textDlist = "0"
set FAT = 1.0

set THICK = 1.0p
set THIN  = 1.0p
foreach GROUP ( $GROUPlist )
  set flag_textphase = "y"
  switch ( $GROUP )

  case Pgroup :
  set Phaselist = `echo $Pgroup`
  set PHASECOLOR = 0/0/255
  set THICK = 1.0p
  set wTYPE = $THICK/$PHASECOLOR
  if ( $COMP == "Z" ) then
     set wTYPE = `echo $THICK $PHASECOLOR $FAT | awk '{print $1*$3"p/"$2}'`
  else if ( $COMP == "R" || $COMP == "T" ) then
     set flag_textphase = "n"
  endif
  breaksw

  case pPgroup:
  set Phaselist = `echo $pPgroup`
  set PHASECOLOR = 160/160/255
  set wTYPE = $THIN/"$PHASECOLOR"t5_4:0p
  if ( $COMP == "Z" ) then
     #set wTYPE = `echo $wTYPE | awk -Fp/ '{ print $1*2"p/"$2}'`
     set wTYPE = `echo $THICK $PHASECOLOR $FAT | awk '{print $1*$3"p/"$2}'`
  else if ( $COMP == "R" || $COMP == "T" ) then
     set flag_textphase = "n"
  endif
  breaksw

  case Sgroup:
  set Phaselist = `echo $Sgroup`
  set PHASECOLOR = 255/0/0
  set THICK = 1.0p
  set wTYPE = $THICK/$PHASECOLOR
  if ( $COMP == "Z") then
     set flag_textphase = "n"
  else if  ( $COMP == "T" || $COMP == "R"  ) then
     set wTYPE = `echo $THICK $PHASECOLOR $FAT | awk '{print $1*$3"p/"$2}'`
  endif
  breaksw

  case SVgroup:
  set Phaselist = `echo $SVgroup`
  set PHASECOLOR = 255/0/0
  set THICK = 1.0p
  set wTYPE = $THICK/$PHASECOLOR
  if ( $COMP == "R" ) then
     set wTYPE = `echo $THICK $PHASECOLOR $FAT | awk '{print $1*$3"p/"$2}'`
  else if ( $COMP == "T" || $COMP == "Z"  ) then
     set flag_textphase = "n"
  endif
  breaksw

  case SHgroup:
  set Phaselist = `echo $SHgroup`
  set PHASECOLOR = 255/0/0
  set THICK = 1.0p
  set wTYPE = $THICK/$PHASECOLOR
  if ( $COMP == "T" ) then
     set wTYPE = `echo $THICK $PHASECOLOR $FAT | awk '{print $1*$3"p/"$2}'`
  else if ( $COMP == "R" || $COMP == "Z" ) then
     set flag_textphase = "n"
  endif
  breaksw

  case sSgroup:
  set Phaselist = `echo $sSgroup`
  set PHASECOLOR = 255/140/140
  set wTYPE = $THIN/"$PHASECOLOR"t1_3:0p
  if ( $COMP == "Z") then
     set flag_textphase = "n"
  else if  ( $COMP == "T" || $COMP == "R"  ) then
     set wTYPE = `echo $THICK $PHASECOLOR $FAT | awk '{print $1*$3"p/"$2}'`
  endif
  breaksw

  case sSVgroup: 
  set Phaselist = `echo $sSVgroup`
  set PHASECOLOR = 255/140/140
  set wTYPE = $THIN/"$PHASECOLOR"t1_3:0p
  if ( $COMP == "R" ) then
     set wTYPE = `echo $THICK $PHASECOLOR $FAT | awk '{print $1*$3"p/"$2}'`
  else if ( $COMP == "T" || $COMP == "Z"  ) then
     set flag_textphase = "n"
  endif
  breaksw

  case sSHgroup: 
  set Phaselist = `echo $sSHgroup`
  set PHASECOLOR = 255/140/140
  set wTYPE = $THIN/"$PHASECOLOR"t1_3:0p
  if ( $COMP == "T" ) then
     set wTYPE = `echo $THICK $PHASECOLOR $FAT | awk '{print $1*$3"p/"$2}'`
  else if ( $COMP == "R" || $COMP == "Z" ) then
     set flag_textphase = "n"
  endif
  breaksw
  
  case sPgroup:
  set Phaselist = `echo $sPgroup`
  set PHASECOLOR = 160/160/255
  set wTYPE  = $THIN/"$PHASECOLOR"t1_3:0p
  if ( $COMP == "T" || $COMP == "R" ) then
     set flag_textphase = "n"
  endif
  breaksw

  case pSgroup:
  set Phaselist = `echo $pSgroup`
  set PHASECOLOR = 255/160/160
  set wTYPE  = $THIN/"$PHASECOLOR"t5_4:0p
  if ( $COMP == "T" || $COMP == "Z" ) then
     set flag_textphase = "n"
  endif
  
  breaksw
  case SPgroup:
  set Phaselist = `echo $SPgroup`
  set PHASECOLOR = 30/255/30
  set wTYPE  = $THIN/$PHASECOLOR
  if ( $COMP == "T" ) then
     set flag_textphase = "n"
  endif
  
  breaksw
  case pSPgroup: 
  set Phaselist = `echo $pSPgroup` 
  set PHASECOLOR = 160/255/160
  set wTYPE  = $THIN/"$PHASECOLOR"t5_4:0p
  if ( $COMP == "T" ) then
     set flag_textphase = "n"
  endif
  
  endsw

  set iphase = 1 
  while ( $iphase <= $#Phaselist )
    set phasename = $Phaselist[$iphase]

    taup_curve -mod $MODEL -h $EZ -ph $phasename -rel $PHASE  
    set nline_taup = `wc -l < taup_curve.gmt `

    if ($nline_taup >= 2 ) then
       if ( $flag_textphase == "y" ) then  
         set drange_TC = `cat taup_curve.gmt | awk 'NR > 1 {print $1}' | minmax -C`
         set drange_TC_TEXT = `echo $drange_TC $DISTMIN $DISTMAX |  tr ' ' '\n' | sort -n | tr '\n' ' ' | awk '{print $2, $3}'`
         set ddist_PLOT = `echo $DISTMAX  $DISTMIN | awk '{printf "%d \n", $1-$2}'`
         if ( $ddist_PLOT >= 90 ) then 
            if ( $phasename == "P" || $phasename == "S" ||  $phasename == "ScS" || $phasename == "ScSScS" ||  $phasename == "ScP" ||  $phasename == "SKS" ) then
                set drange_TC_TEXT =  `echo $drange_TC_TEXT | awk '{ print $1, $1+5/100*($2-$1)}'`
            else if ( $phasename == "pP" || $phasename == "pS" ) then
                set drange_TC_TEXT =  `echo $drange_TC_TEXT | awk '{ print $1+20/100*($2-$1), $2}'`
            else if ( $phasename == "SS" || $phasename == "SSS" || $phasename == "SSS" ||  $phasename == "SKKS" ||  $phasename == "SKKKS"  ) then
               set drange_TC_TEXT =  `echo $drange_TC_TEXT | awk '{ print $2-20/100*($2-$1), $2}'`
           endif
         endif
         set ddist = `echo $drange_TC_TEXT[1] $drange_TC_TEXT[2] $DISTMIN $DISTMAX $ddist0 | awk '{if ( ($2-$1)/($4-$3) < 0.3 ) {print $5/2} else {print $5}}'` 

         # in linux
         #set randomnum =  `echo | awk '{ srand(systime()); print rand()}'`
         # in MAC
         set randomnum = `random_num`
         # ------------------------------------
         set textD = `echo $drange_TC_TEXT[1] $drange_TC_TEXT[2]  $randomnum | awk '{print $3*($2-$1)+$1}' `
         set trange_TC = `cat taup_curve.gmt | awk 'NR > 1 {print $2}' | minmax -C`
         set trange_TC_TEXT = `echo $trange_TC $TIMEMIN $TIMEMAX |  tr ' ' '\n' | sort -n | tr '\n' ' ' | awk '{print $2, $3}'`
         set textDlist = `echo $textDlist |  tr ' ' '\n' | sort -n | tr '\n' ' '  `
         set logic_recal = `echo $textD $textDlist | awk '{  for (i = 2; i <= NF ; ++i) if ( ($1 - $i) <= '$ddist') {print "y"} }' | head -1 `
  
         set ii = 1
         while ( $logic_recal == "y"  ) 
             #set randomnum =  `echo | awk '{ srand(systime()*'$ii'); print rand()}'`
             set randomnum = `random_num`
             set textD = `echo $drange_TC_TEXT[1] $drange_TC_TEXT[2]  $randomnum | awk '{print $3*($2-$1)+$1}'`
             if ( $ii >= 100 ) then
                 set ddist = `echo $ddist | awk '{print $1/2}'`
             endif
             set logic_recal = `echo $textD $textDlist | awk ' function abs(x){return (((x < 0.0) ? -x : x) + 0.0)} {for (i = 2; i <= NF ; ++i) if ( abs($1 - $i) <= '$ddist') {print "y"} }' | head -1 ` 
  
             @ ii = $ii + 1 
         end #end while logic_real

         set textDlist = `echo $textDlist $textD `
  
taupTC_text << ! >! textgmt.out
taup_curve.gmt
$textD
$trange_TC_TEXT[1] $trange_TC_TEXT[2]
!
         cat textgmt.out | head -1 | awk '{ print "echo ",$2,$1, "12 0 22 LM '$phasename' | pstext -J'$SCALE' -R'$RANGE' -G'$PHASECOLOR' -Sthicker/255 -K -O -N >> '$OUTFILE'"  }' >> pstext.temp
       endif  # if flag_text phase
       if ( $phasename == "SSS" || $phasename == "PPP" ||  $phasename == "sSSS" || $phasename == "SSSS" || $phasename == "SS" || $phasename == "PP") then
          set wTYPE = `echo $wTYPE | awk -Fp/ '{ print $1/2"p/"$2}'`
       endif

       psxy taup_curve.gmt -J$SCALE -R$RANGE  -: -W$wTYPE $MGMT -K -O >> $OUTFILE

    endif   # if nline_taup

    @ iphase ++
  end  # end while iphase

end #end foreach GROUP

# plot labels
sort -k 2 -nr  pstext.temp | csh


# ttime curve clean up
\rm pstext.temp taup_curve.gmt textgmt.out 
\rm taupTC_text

# message to screen we're done this this file
echo "done w/ some traveltime curves"


# close up plot
pstext -J$SCALE -R$RANGE -O  << END >> $OUTFILE
END

cd ..

end  # foreach TYPE

#some clean up, lists, tmp records, etc.
\rm *.? *.?lp  datetag?
\rm *.LIST xy*seismograms
\rm  SAC2XYZOOM out.sac out.sac2xyzoom
\rm INFIL awkfile $EVENT.m.process
# return to our pwd

cd $DIRPWD

 
echo "-------------------------------------------------------------"
echo "                c08.profile_zoom: DONE"
echo "-------------------------------------------------------------"
echo " "

#EOF
