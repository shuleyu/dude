#!/bin/csh
# EJG/PL March 2010
# 
#===========================================================
#                  c16.empirical_src_stack
#===========================================================
# here we use pei-ying (patty) lin's code for computing
# a stack of a phase that is windowed around that phase.
# the process first stacks along PREM's prediction for
# that phase.  this is called "stack0".  in making that
# stack, we also use our SNR measured in c17 to weight the
# max amplitude in that window, after first normalizing
# to unity.  THEN, each record is cross-correlated to
# the stack0, yielding a cross-correlation coefficient
# (CCC), and a time shift.  A second stack is then
# carried out, after shifting records, and scaling
# again.  This is called "stack1".  It is plotted
# with a shaded region showing the standard deviation
# of each point in the stack.  The CCC's and dt's are
# written in a file for making some info histograms.
# we will also make use of our predictions of radiation
# patterns.  if there is a minus sign in the radpat
# prediction, we will flip the record's polarity.

# INPUT:  (1) station/event location info and distances from
# -----       master info file
#         (2) some directory location information
#         (3) SNR ratios from c17.*
#         (4) radiation pattern prediction info file
 
# this code should work for any phase taup understands,
# but we've only test-driven it for P and S.

# the proverb "garbage in, garbage out" definitely
# applies here.  for example, if you want to make a
# pulse shape of S on the SV component, if you go
# pass 80 deg or so, you also get SKS coming across,
# and hence those records are added to the mix, and
# make the stack erroneous.  

# OUTPUT:  (1) a post-script plot of the empirical source
#              and some histograms of CCC's and dt's
#          (2) an info file of the CCC's and dt's


echo " "
echo "-------------------------------------------------------------"
echo "                c16.empirical_src_stack:     STARTING "
echo "-------------------------------------------------------------"

# some input from the mother script
set EVENT     = $1
set DIRSRC    = $2
set DIRDATA   = $3
set DIRPLOT   = $4
set PHASE     = $5
set COMP      = $6
set DISTMIN   = $7
set DISTMAX   = $8
set TIMEMIN   = $9 
set TIMEMAX   = $10
set flag_SNR  = $11 #0= off/1= on  ("1" if c17 has been run)

# define output filename
set OUTFILE = $DIRPLOT/$EVENT.c16.emp_src_stack.$PHASE.$COMP.ps

# go to the data directory
set DIRPWD = ` pwd `
cd $DIRDATA/$EVENT

# source our env variable script
source $DIRSRC/c0.ENV_setting

# loose the header line
awk ' NR>1 {print $0}' eventStation.$EVENT >! INFIL

# define event coords and mag
set COORDS = ` awk ' NR==1 {print $11,$12,$13,$16}' INFIL `
set NSTA   = ` wc -l INFIL | awk '{print $1}' `
set ELAT   = $COORDS[1] 
set ELON   = $COORDS[2] 
set EZ     = $COORDS[3] 
set EMAG   = $COORDS[4] 

# get the radiation pattern prediction
# column w/ the goods. if we want to do a
# different phase, we don't get polarity from
# radiation pattern  unless we explicity
# compute it (e.g., in c08*). thus we
# will just give it a "1" in that case


if ($PHASE == P && $COMP == Z ) then
   @ COL_RADPAT = 3
   awk ' NR>1 {print $'$COL_RADPAT' }' eventStation.$EVENT.rad_info >! AMPFILE
else if ($PHASE == S && $COMP == T ) then
   @ COL_RADPAT = 21
   awk ' NR>1 {print $'$COL_RADPAT' }' eventStation.$EVENT.rad_info >! AMPFILE
else if ($PHASE == S && $COMP == R ) then
   @ COL_RADPAT = 24
   awk ' NR>1 {print $'$COL_RADPAT' }' eventStation.$EVENT.rad_info >! AMPFILE
else if ($PHASE == SS && $COMP == T ) then
   @ COL_RADPAT = 27
   awk ' NR>1 {print $'$COL_RADPAT' }' eventStation.$EVENT.rad_info >! AMPFILE
else if ($PHASE == ScS && $COMP == T ) then
   @ COL_RADPAT = 30
   awk ' NR>1 {print $'$COL_RADPAT' }' eventStation.$EVENT.rad_info >! AMPFILE
else if ($PHASE == SKS && $COMP == R ) then
   @ COL_RADPAT = 33
   awk ' NR>1 {print $'$COL_RADPAT' }' eventStation.$EVENT.rad_info >! AMPFILE
else
   @ o = 1
   while($o <= $NSTA)
       echo 1.0 >>! AMPFILE
       @ o++
   end
endif

# paste this on some info from the big info file
awk '{print $1,$3}' INFIL >! STADIST
paste STADIST AMPFILE >! STADISTAMP

if ( $flag_SNR ==  1 ) then
# quickly compute SNR for P or S
if ($PHASE == P && $COMP == Z ) then
    awk '{if ($2 != 0.0 ) {print  $2/(.0000000001+$1), $7} else {print 0, $7}}' eventStation.$EVENT.SNR_info >! SNRFILE
else if ($PHASE == S && $COMP == R ) then
    awk '{if ($4 != 0.0 ) {print  $4/(.0000000001+$3), $7} else {print 0, $7}}' eventStation.$EVENT.SNR_info >! SNRFILE
else if ($PHASE == S && $COMP == T ) then
    awk '{if ($6 != 0.0 ) {print  $6/(.0000000001+$5), $7} else {print 0, $7}}' eventStation.$EVENT.SNR_info >! SNRFILE
else
    cp AMPFILE SNRFILE
endif

# paste this onto our growing file
paste STADISTAMP SNRFILE >! STADISTAMPSNR
\rm  STADISTAMP SNRFILE
else if ( $flag_SNR ==  0 ) then
/bin/mv STADISTAMP STADISTAMPSNR 
endif 

if(-e master_weights) \rm master_weights
@ r = 1
while($r <= $NSTA)
    set AMPS = ` awk ' NR=='$r' {print $1,$2,$3,$4}' STADISTAMPSNR `
    set STATION   = $AMPS[1]
    set DISTANCE  = $AMPS[2]
    set AMPLITUDE = $AMPS[3]
    if (  $flag_SNR ==  1 ) then
        set SNRATIO   = $AMPS[4]
    else if ( $flag_SNR ==  0  ) then
        set SNRATIO   = 10
    endif
    set FLIP = ` echo $AMPLITUDE | awk ' $1<0 { print "Y" }' `
    if($FLIP == Y) then
       @ AMPLITUDE = -1
    else
       @ AMPLITUDE = 1
    endif
    set iSNR = ` echo $SNRATIO | awk '{ print int($1) }' `
    if($iSNR > 5 ) then
       set WEIGHT = ` echo $AMPLITUDE | awk '{ print $1 * 1.0}' ` 
    else if($iSNR > 4 && $iSNR <= 5 ) then
       set WEIGHT = ` echo $AMPLITUDE | awk '{ print $1 * 0.9}' ` 
    else if($iSNR > 3 && $iSNR <= 4 ) then
       set WEIGHT = ` echo $AMPLITUDE | awk '{ print $1 * 0.8}' ` 
    else if($iSNR > 2 && $iSNR <= 3 ) then
       set WEIGHT = ` echo $AMPLITUDE | awk '{ print $1 * 0.6}' ` 
    else if($iSNR > 1 && $iSNR <= 2 ) then
       set WEIGHT = ` echo $AMPLITUDE | awk '{ print $1 * 0.4}' ` 
    else if($iSNR <= 1 ) then
       set WEIGHT = ` echo $AMPLITUDE | awk '{ print $1 * 0.2}' ` 
    endif

    echo $STATION $COMP $DISTANCE $WEIGHT >>! master_weights

    @ r++
end
\rm STADIST STADISTAMPSNR AMPFILE 


# we need to do some preconditioning of the files, e.g.,
# to insure all the dt time spacings are uniform..
# make the awkfile that will be run by SAC. it is
# basically how we will precondition our records before
# patty's fortran90 code that stacks
echo "c16.empirical_src_stack: making the SAC macro"
cat << EOF >! awkfile
{
print "r *." \$1 ".?H" \$2 ".sac"  
print "rmean" 
print "rtr" 
print "taper" 
print "bp co 0.01 0.2 n 2 p 2" 
print "interp d 0.05"
print "w " \$1"." \$2
} 
EOF

# make the sac macro now, using our awkfile
awk -f awkfile master_weights  >! $EVENT.m.process

echo "c16.empirical_src_stack: running the SAC macro"
# run the sac macro
sac << END >! out.sac
m $EVENT.m.process
quit
END

# make list of seismograms, for our f90 code input
awk ' $3>='$DISTMIN' && $3<='$DISTMAX' {print $1 "." $2, $4}' \
      master_weights >! in.EmpiricalSource

# new NSTA
@ NSTA = ` wc -l  in.EmpiricalSource | awk '{print $1}' `

# compile code:
#$FCOMP -m32  -I$DIRSRC $DIRSRC/empiricalSource.f90 -o EmpiricalSource $SACLIBs
$FCOMP -I$DIRSRC $DIRSRC/empiricalSource.f90 -o EmpiricalSource $SACLIBs 

# run the code
echo "c16.empirical_src_stack: running the stacking code"
EmpiricalSource << EOF 
$PHASE
$TIMEMIN $TIMEMAX
in.EmpiricalSource
EOF

# rename some output
/bin/mv ccdt eventStation.$EVENT.ccc,dt

#==============================================================
#                 plotting time!!
#==============================================================

echo "c16.empirical_src_stack: MAKING PLOT FILE NOW"

# plot the text of the title,
# also, plot a big title at top of page:
# first, break apart event name for Big Title:
set YYYY = ` echo $EVENT | cut -c1-4 `
set MM   = ` echo $EVENT | cut -c5-6 `
set DD   = ` echo $EVENT | cut -c7-8 `
set HH   = ` echo $EVENT | cut -c9-10 `
set MIN  = ` echo $EVENT | cut -c11-12 `

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#           t o p    p a n e l :     emp src stack
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# plot size , etc, for the empirical stack panel
# get some plot bounds minmax for our stacks.
# we'll add 5% to min and max
set YBOUNDS = ` cat xy.st* | grep -v -h ">" | minmax -C | awk '{print 1.05*$3,1.05*$4}' `
set YMINI = $YBOUNDS[1]
set YMAXI = $YBOUNDS[2]
set RANGE = $TIMEMIN/$TIMEMAX/$YMINI/$YMAXI
set YORIG = -Y7.5i
set XSIZE = 6.0
set YSIZE = 2.5
set SCALE = X${XSIZE}i/${YSIZE}i

# new station count (i.e., stations that went into stack)
set NSTA   = ` awk ' $1||'NaN' {print $1}' eventStation.$EVENT.ccc,dt | wc -l | awk '{ print $1}' `

# initiate plot with some text (titles, labels, etc)
pstext -Jx1i -R0/6/0/9 -N -K -P $YORIG << END >! $OUTFILE
3.0 3.3 18  0 0 CB Event: ${MM}/${DD}/$YYYY ${HH}:${MIN} EMP SRC STACK Phase=$PHASE Comp=$COMP
3.0 3.1 15  0 0 CB $EVENT  LAT=$ELAT LON=$ELON Z=$EZ Mb=$EMAG NSTA=$NSTA
END

# more text: script name and time stamp
echo "3.0 2.9 14 0 0 CB SCRIPT: c16.empirical_src_stack" >! datetag1
date "+CREATION DATE: %m/%d/%y  %H:%M:%S" >! datetag2
paste datetag1 datetag2 >! datetag3
pstext datetag3 -Jx -R -N -G0 -O -K >> $OUTFILE
\rm datetag?

# define emp source plot box:
psbasemap -J$SCALE -R$RANGE -Ba5f1S -Y0.3i -P -K -O >> $OUTFILE
# plot standard deviation background polygon:
psxy xy.stdpolygon -J$SCALE -R$RANGE  -L -G200 -O -K >> $OUTFILE
# make and plot zero line:
echo $TIMEMIN 0 >! xy.zero
echo $TIMEMAX 0 >> xy.zero
psxy xy.zero -J$SCALE -R$RANGE -W1p/yellow  -O -K >> $OUTFILE
# plot first stack:
psxy xy.stack0 -J$SCALE -R$RANGE -W1p/0 $MGMT -O -K >> $OUTFILE
# plot 2nd iteration stack:
psxy xy.stack1 -J$SCALE -R$RANGE -W2p/255/0/0 $MGMT -O -K >> $OUTFILE

# make and plot (brute force by hand) legend for these entities.
# they will be short horizontal line segments, at L1 and L2
# our vertical max should be at 1, so those are hardwired guesses
set L1 = ` echo $TIMEMAX $TIMEMIN | awk '{ print $1-($1-$2)*0.25 }' `
set L2 = ` echo $TIMEMAX $TIMEMIN | awk '{ print $1-($1-$2)*0.15 }' `
# stack1 legend
echo $L1 1.0  >! xy.legend1
echo $L2 1.0  >> xy.legend1
psxy xy.legend1 -J$SCALE -R$RANGE -W2p/255/0/0 -O -K >> $OUTFILE
# stack0 legend
echo $L1 0.85 >! xy.legend2
echo $L2 0.85 >> xy.legend2
psxy xy.legend2 -J$SCALE -R$RANGE -W1p/0 -O -K >> $OUTFILE
# std dev legend
echo $L1 0.67 >! xy.legend3
echo $L2 0.67 >> xy.legend3
psxy xy.legend3 -J$SCALE -R$RANGE -W15p/200 -O -K >> $OUTFILE
# legend label
set L2 = ` echo $TIMEMAX $TIMEMIN | awk '{ print $1-($1-$2)*0.13 }' `
set L3 = ` echo $TIMEMAX $TIMEMIN | awk '{ print $1-($1-$2)/2 }' `
set Y3 = ` echo $YMAXI $YMINI | awk '{ print $2-($1-$2)*0.14 }' `
pstext -J$SCALE -R$RANGE -N -O -K << END >> $OUTFILE
$L2 1.0  11  0 0 LM 2nd Stack
$L2 0.85 11  0 0 LM 1st Stack
$L2 0.67 11  0 0 LM +/- 1 STDEV
$L3 $Y3  12  0 0 CT Relative time (sec)
END

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#        m i d d l e    p a n e l :     CCC histogram
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# make our input file:
grep -v -h NaN eventStation.$EVENT.ccc,dt | awk '{ print $1}' >! in.ccc

# def min and max's of things. first, x direction (we know the bounds)
@ XMIN = -1
@ XMAX = 1
set XINC = 0.05
set XNUM = 0.5

# new YSIZE, ORIG
set YSIZE = 1.5
set YORIG = -2.5

# for the ymax, we first make a histogram to see what our max frequency is
pshistogram in.ccc -W$XINC -IO >! tmp.histo

# add 20% to the max value and round off, for plot
# maximum. some duct tape here...
set FREQMAX = ` minmax -C tmp.histo | awk '{ print 1.2*$4}' `

# round up for y axis max (more duct tape!):
@ YMAX = ` echo $FREQMAX | awk ' { if ($1%10 < 5 ) {print 10*int(1.0*$1/10.0)} else {print 5+(10*int(1.0*$1/10.0))} }' `
# crunch an even number y-axis increment (assuming we have
# more that "10" for at least some histogram bin...)
@ YNUM = ` echo $YMAX | awk '{print 10*int(1.0*$1/50.0) }'`
#@ YNUM = ` echo $YMAX | awk '{print 20*int(1.0*$1/100.0) }' `

# have twice as many ticks as numbers on y-axis:
@ YTICK = ` echo $YNUM | awk '{print int(1.0*$1 / 2.0) }' `
if ( $YNUM == 0 ) then
set YNUM = 10 
set YTICK = 5
endif
   
if ( $YMAX <= 10 )  then
set YMAX = 10
set YNUM = 5
set YTICK = 1
endif





# labels
set XLABEL = 'Cross-correlation coefficient between 2nd stack and each record'
set YLABEL = 'Frequency'

# change the GMT label font size and offset default:
gmtset LABEL_FONT_SIZE = 12p
gmtset LABEL_OFFSET = 0.02c

# plot the histogram using GMT's pshistogram
pshistogram in.ccc -Ba${XNUM}f${XINC}:"${XLABEL}":/a${YNUM}f${YTICK}:"${YLABEL}":WSne  \
 -R$XMIN/$XMAX/0/$YMAX -JX${XSIZE}i/${YSIZE}i -W$XINC -L0.5p -G200/200/250 -V -Y${YORIG}i \
  -O -K >> $OUTFILE

# make and plot a zero line:
echo 0 0 >! xy.zero
echo 0 $YMAX >> xy.zero
psxy xy.zero -JX -R -W1p/yellow  -O -K >> $OUTFILE


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#  l o w e r   m i d d l e    p a n e l :     dt's histogram
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# make our input file:
grep -v -h NaN eventStation.$EVENT.ccc,dt | awk '{ print $2}' >! in.dt

# def min and max's of things. first, x direction.
# now we do not know the bounds. but we are plotting travel time
# anomalies. we can hardwire it to be something sensible (e.g.,
# +/- 15 sec, but that will possibly miss errors (e.g., 30 sec)
# that results from our correlation code completely screwing up!
# so we'll have this script compute the bounds. assume 10%
# cushion on min and max side of dts, and make it an intenger:
set XBOUNDS = `cat in.dt | minmax -C | awk '{print int(1.1*$1), int(1.1*$2)}' `
@ XMIN = $XBOUNDS[1]
@ XMAX = $XBOUNDS[2]

# let's define our x-axis NUMBER increment to be 1/10th of [ max - min ]
set XNUM = ` echo $XMAX $XMIN | awk '{print int(($1 - $2)/10.) }' `

# here we hardwire our XINC to be 1... 1 tick per second.  should be ok
set XINC = 1

# NOTE: we are keeping our same YSIZE, but change YORIG from prev histog.
set YORIG = -2.3

# for the ymax, we first make a histogram to see what our max frequency is
pshistogram in.dt -W$XINC -IO >! tmp.histo

# add 20% to the max value and round off, for plot
# maximum. some duct tape here...
set FREQMAX = ` minmax -C tmp.histo | awk '{ print 1.2*$4}' `

# round off for y axis max (more duct tape!):
#@ YMAX = ` echo $FREQMAX | awk '{print 10*int(1.0*$1/10.0)+5 }' `
@ YMAX = ` echo $FREQMAX | awk ' { if ($1%10 < 5 ) {print 10*int(1.0*$1/10.0)} else {print 5+(10*int(1.0*$1/10.0))} }' `
# crunch an even number y-axis increment (assuming we have
# more that "10" for at least some histogram bin...)
@ YNUM = ` echo $YMAX | awk '{print 10*int(1.0*$1/50.0) }' `
# have twice as many ticks as numbers on y-axis:
@ YTICK = ` echo $YNUM | awk '{print int(1.0*$1 / 2.0) }' `
if ( $YNUM == 0 ) then
set YNUM = 10 
set YTICK = 5
endif
   
if ( $YMAX <= 10 )  then
set YMAX = 10
set YNUM = 5
set YTICK = 1
endif


# labels
set XLABEL = 'Time shift of each record to 2nd stack, for max correlation (sec)'
set YLABEL = 'Frequency'

# change the GMT label font size default:
gmtset LABEL_FONT_SIZE=12p

# plot the histogram using GMT's pshistogram
pshistogram in.dt -Ba${XNUM}f${XINC}:"${XLABEL}":/a${YNUM}f${YTICK}:"${YLABEL}":WSne  \
 -R$XMIN/$XMAX/0/$YMAX -JX${XSIZE}i/${YSIZE}i -W$XINC -L0.5p -G200/200/250 -V -Y${YORIG}i \
  -O -K >> $OUTFILE

# make and plot a zero line:
echo 0 0 >! xy.zero
echo 0 $YMAX >> xy.zero
psxy xy.zero -JX -R -W1p/yellow  -O -K >> $OUTFILE


if ( $flag_SNR == 1 ) then
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#              b o t t o m    p a n e l :     SNR histogram
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# right now we get a bit heavy handed: since we didn't 
# compute SNR for all phases, but in fact only made them
# for P and S, we will hardwire this script to always plot
# the P SNR's, unless the PHASE of choice is S, then we will
# plot S.  This is obviously easily changed, if the phase
# of choice in the SNR script is the phase of choice you
# will plot here.  we just haven't actually tested that yet.
# some options are considered

# define which SNR measurement to use
if($PHASE == 'S' && $COMP == 'R' ) then
   set SNRCOMP = R
   set XLABEL = 'SNR, of S and a 2 min window out in front of direct P (all on R-comp)'
else if($PHASE == 'SKS' && $COMP == 'R' ) then
   set SNRCOMP = R
   set XLABEL = 'SNR, of S and a 2 min window out in front of direct P (all on R-comp)'
else if($PHASE == 'S' && $COMP == 'T' ) then
   set SNRCOMP = T
   set XLABEL = 'SNR, of S and a 2 min window out in front of direct P (all on T-comp)'
else if($PHASE == 'ScS' && $COMP == 'T' ) then
   set SNRCOMP = T
   set XLABEL = 'SNR, of S and a 2 min window out in front of direct P (all on T-comp)'
else if($PHASE == 'SS' && $COMP == 'T' ) then
   set SNRCOMP = T
   set XLABEL = 'SNR, of S and a 2 min window out in front of direct P (all on T-comp)'
else
   set SNRCOMP = Z
   set XLABEL = 'SNR, of P and a 2 min window out in front of direct P (all on Z-comp)'
endif

# make what becomes our input file to the histog maker
set snrfile = eventStation.$EVENT.SNR_info
if($SNRCOMP == R ) then
   awk '$4 != 0 {print $4/($3+0.0000000001) }' $snrfile >! in.snr 
else if($SNRCOMP == T ) then
   awk '$6 != 0 {print $6/($5+0.0000000001) }' $snrfile >! in.snr 
else
   awk '$2 != 0 {print $2/($1+0.0000000001) }' $snrfile >! in.snr 
endif

# this next line is in case you want to place a threshold on the SNR:
# if the snr is > some threshold (5, below), then make it 5.  I 
# comment it out for the time being
#cat in.snr | awk '{ if ($1 <= 5 ) {print $0} else {print 5} }' >! in.snr.temp
#\mv in.snr.temp in.snr

# def min and max's of things. first, x direction.
# as above, we do not know the bounds. compute them,
# assume 10% cushion on min and max side of snr
set XBOUNDS = `cat in.snr | minmax -C | awk '{print 1.1*$1, 1.1*$2}' `
set XMIN = $XBOUNDS[1]
set XMAX = $XBOUNDS[2]

# let's define our x-axis NUMBER increment to be 1/5th of [ max - min ]
set XNUM = ` echo $XMAX $XMIN | awk '{print int(($1 - $2)/5.) }' `

# let's have XINC to be ever integer, since most SNRs will be 5 or less
set XINC = 1

# NOTE: we are keeping our same YSIZE and YORIG from prev histog.

# for the ymax, we first make a histogram to see what our max frequency is
pshistogram in.snr -W$XINC -IO >! tmp.histo
# add 20% to the max value and round off, for plot
# maximum. some duct tape here...
set FREQMAX = ` minmax -C tmp.histo | awk '{ print 1.2*$4}' `
# round off for y axis max (more duct tape!):
@ YMAX = ` echo $FREQMAX | awk '{print 10*int(1.0*$1/10.0) }' `

# crunch an even number y-axis increment (assuming we have
# more that "10" for at least some histogram bin...)
@ YNUM = ` echo $YMAX | awk '{print 10*int(1.0*$1/50.0) }' `
# have twice as many ticks as numbers on y-axis:
@ YTICK = ` echo $YNUM | awk '{print int(1.0*$1 / 2.0) }' `
if ( $YMAX <= 10 ) then
set YMAX = 10
set YNUM = 5
set YTICK = 1
endif 
# labels
set YLABEL = 'Frequency'

# change the GMT label font size default:
gmtset LABEL_FONT_SIZE=12p

# plot the histogram using GMT's pshistogram
pshistogram in.snr -Ba${XNUM}f${XINC}:"${XLABEL}":/a${YNUM}f${YTICK}:"${YLABEL}":WSne  \
 -R$XMIN/$XMAX/0/$YMAX -JX${XSIZE}i/${YSIZE}i -W$XINC -L0.5p -G200/200/250 -V -Y${YORIG}i \
  -O -K >> $OUTFILE
endif
# NOTE: no zero line for this panel

# close up shop
pstext -JX -R -O  << END >> $OUTFILE
END

#some clean up, lists, tmp records, etc.
\rm awkfile out.sac in.EmpiricalSource INFIL
\rm {???,????,?????}.?
\rm xy.stack1 xy.stack0 xy.stdpolygon xy.zero 
\rm $EVENT.m.process EmpiricalSource master_weights
\rm in.dt in.ccc tmp.histo .gmtdefaults* .gmtcommands*
\rm xy.legend?
if ( $flag_SNR == 1 ) then
\rm in.snr
endif
 
# return to our pwd
cd $DIRPWD

echo "-------------------------------------------------------------"
echo "                c16.empirical_src_stack:     DONE "
echo "-------------------------------------------------------------"
echo " "

# EOF
