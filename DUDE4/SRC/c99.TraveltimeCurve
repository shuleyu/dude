#!/bin/csh
# EJG/PL March 2010
#
#===========================================================
#                      c99.TraveltimeCurve
#===========================================================
# make travel time curves made by the taup_toolkit.
#
# the f90 code was written by Pei-ying (Patty) Lin at
# ASU. any errors are undoubtedly mine, as I modified things.

# INPUT:  (1) station/event location info and distances from
# -----       master info file
#         (2) plot box bounds: Dist min/max, time min/max
#         (3) some directory location information

# OUTPUT:  (1) a postscript plot for SV
# -----    (2) a postscript plot for SH
#          (3) a postscript plot for Z

set EVENT           = $1
set DIRSRC          = $2
set DIRDATA         = $3
set DIRPLOT         = $4
set DISTMIN         = $5
set DISTMAX         = $6
set TIMEMIN         = $7
set TIMEMAX         = $8
set COMP            = $9
set CSHELL_NUM      = $10

# go to the data directory
set DIRPWD = ` pwd `

/bin/rm -rf  $DIRDATA/$EVENT/TC
mkdir $DIRDATA/$EVENT/TC
cd $DIRDATA/$EVENT/TC

# source our env variable script

# loose the header line
awk ' NR>1 {print $0}'  $DIRDATA/$EVENT/eventStation.$EVENT >! IINFIL

# define event coords and mag
set COORDS = ` awk ' NR==1 {print $11,$12,$13,$16}' IINFIL `
set NSTA   = ` wc -l IINFIL | awk '{print $1}' `
set ELAT   = $COORDS[1]
set ELON   = $COORDS[2]
set EZ     = `echo $COORDS[3] | awk '{ if ($1>1000) print $1/1000.0 ; else print $1 }'`
set EMAG   = $COORDS[4]

# check to see if script is to compute distance bounds
# for plot.  If DISTMIN = -1, code does it.  If yes,
# code will add +/- 10% of distance range of data
set CHECK = ` echo $DISTMIN | awk ' $1 == -1  { print "Y"}' `
if($CHECK == Y ) then
   set MINMAX = ( ` awk '{print $3}' IINFIL | minmax -C ` )
   set DISTMIN = ` echo $MINMAX | awk '{print int($1 - 0.1*($2 - $1))}' `
   set DISTMAX = ` echo $MINMAX | awk '{print int($2 + 0.1*($2 - $1))}' `
endif

# make lists of seismograms, for plot panels: a separate
# list for each plot to be made


#===========================================================
#             PLOTTING TIME!!!
#===========================================================

# here we make travel time curves with taup
# here, we make them in groups, for different color coding in the
# profile plots that follow. note: the plot gets pretty busy
# pretty quickly, so i don't have all possibilities being plotted
echo "c99: computing travel time curves"
set MODEL     =   prem
set Pgroup    =  ( P PcP PP PKP PKIKP PKiKP Pdiff PKKP PPP )
set pPgroup   =  ( pP pPdiff )
set Sgroup    =  ( S Sdiff SS SSS SSSS  )
set SVgroup   =  ( SKS SKKS SKKKS )

set SHgroup   =  ( ScS ScSScS ScSScSScS ScSScSScSScS ScSScSScSScSScS ScSScSScSScSScSScS ScSScSScSScSScSScSScS )
set sSgroup   =  ( sS sSdiff sSS sSSS  )
set sSVgroup   = ( sSKS sSKKS )
set sSHgroup   = ( sSdiff sScS sScSScS sScSScSScS sScSScSScSScS sScSScSScSScSScS sScSScSScSScSScSScS sScSScSScSScSScSScSScS )

#set SHgroup   =  ( ScS ScSScS )
#set sSgroup   =  ( sS sSdiff sSS sSSS  )
#set sSVgroup   = ( sSKS sSKKS )
#set sSHgroup   = ( sSdiff sScS )

set sPgroup   =  ( sP sPdiff )
set pSgroup   =  ( pS pSS pSdiff pSKS pSKKS )
set SPgroup   =  ( ScP SP PS PcS SKP PKS )
set pSPgroup  =  ( pScP pPS )

# compile code:
# $FCOMP $DIRSRC/taupTC_text.f90 -o taupTC_text
# $FCOMP $DIRSRC/random_num.f90 -o random_num
set RandomNum_Array = `${EXECDIR}/random_num.out`
set count = 1

# plot the text of the title,
# also, plot a big title at top of page:
# first, break apart event name for Big Title:
set YYYY = ` echo $EVENT | cut -c1-4 `
set MM   = ` echo $EVENT | cut -c5-6 `
set DD   = ` echo $EVENT | cut -c7-8 `
set HH   = ` echo $EVENT | cut -c9-10 `
set MIN  = ` echo $EVENT | cut -c11-12 `

# plot size (the f90 sac2xy code assumes these are the dimensions
# we are working with)
set XSIZE = 6
set YSIZE = 8.5
set ddist0 = `echo $DISTMAX $DISTMIN | awk '{print 0.03*($1-$2)}' `

# crunch some axis attributes for plot:
# well put dist on horiz axis, and time on vertical
set BX    = `echo $TIMEMIN $TIMEMAX | awk '{print $2-$1}' | awk '{ if ( $1/100 >= 20 ) {print 500,100} else if ( $1/100 < 10 ) {print 100, 10} else {print 200, 20} }'`
set BY    = `echo $DISTMIN $DISTMAX | awk '{print (int(int(($2-$1)/10)/5)+1)*5 }' |  awk '{print $1, $1/5}'`
set SCALE = X"$XSIZE"i/-"$YSIZE"i
set RANGE = $TIMEMIN/$TIMEMAX/$DISTMIN/$DISTMAX/
gmtset GRID_PEN_PRIMARY  0.25p,200/200/200
set BAXIS = a"$BX[1]"f"$BX[2]"g"$BX[2]"/a"$BY[1]"f"$BY[2]"g"$BY[2]"
set Y0 = -Y1.5i

# define the output file
if ( $COMP == "ALL" ) then
    set NCOMP = 0
else if ( $COMP == "Z" ) then
    set NCOMP = 1
else if ( $COMP == "R" ) then
    set NCOMP = 2
else if ( $COMP == "T" ) then
    set NCOMP = 3
endif

set iEZ = `echo $EZ | awk '{printf "%d\n",$1}'`
set OUTFILE = $DIRPLOT/$EVENT.$CSHELL_NUM.traveltimeCurve$NCOMP.$COMP.ps
if ( $iEZ <= 50 ) then
   set GROUPlist = ( SPgroup Sgroup SHgroup SVgroup Pgroup )
else
   set GROUPlist = ( pSPgroup pSgroup sPgroup SPgroup sSgroup sSHgroup sSVgroup pPgroup Sgroup SHgroup SVgroup Pgroup )
endif

# plot some text
pstext -Jx1i -R0/6/0/9 -K -N -P $Y0 << END >! $OUTFILE
3.0 9.3 20  0 0 CB Event: ${MM}/${DD}/$YYYY ${HH}:${MIN}  Comp: $COMP
3.0 9.0 15  0 0 CB $EVENT  LAT=$ELAT LON=$ELON Z=$EZ Mb=$EMAG
-0.5 4.5 15 90 0 CB Distance (deg)
3.0 -0.7 15  0 0 CB Time after earthquake origin time (sec)
END

# initiate coords for traces and curves
psbasemap -J$SCALE -R$RANGE -B"$BAXIS"WSne -K -O -P >> $OUTFILE


# plot travel time curves

cat << EOF >! pstext.temp
EOF
set textDlist = "0"

foreach GROUP ( $GROUPlist )
set flag_textphase = "y"
switch ( $GROUP )
case Pgroup :
set Phaselist = `echo $Pgroup`
set PHASECOLOR = 100/100/255
set wTYPE = 1.0p/$PHASECOLOR
if ( $COMP == "Z" ) then
   set wTYPE = `echo $wTYPE | awk -Fp/ '{ print $1*2"p/"$2}'`
else if ( $COMP == "R" || $COMP == "T" ) then
   set flag_textphase = "n"
endif
breaksw
case pPgroup:
set Phaselist = `echo $pPgroup`
set PHASECOLOR = 160/160/255
set wTYPE = 1.0p/"$PHASECOLOR"t5_4:0p
if ( $COMP == "Z" ) then
   set wTYPE = `echo $wTYPE | awk -Fp/ '{ print $1*2"p/"$2}'`
else if ( $COMP == "R" || $COMP == "T" ) then
   set flag_textphase = "n"
endif
breaksw
case Sgroup:
set Phaselist = `echo $Sgroup`
set PHASECOLOR = 255/100/100
set wTYPE = 1.0p/$PHASECOLOR
if ( $COMP == "Z") then
set flag_textphase = "n"
else if  ( $COMP == "T" || $COMP == "R"  ) then
set wTYPE = `echo $wTYPE | awk -Fp/ '{ print $1*2"p/"$2}'`
endif
breaksw
case SVgroup:
set Phaselist = `echo $SVgroup`
set PHASECOLOR = 255/100/100
set wTYPE = 1.0p/$PHASECOLOR
if ( $COMP == "R" ) then
set wTYPE = `echo $wTYPE | awk -Fp/ '{ print $1*2"p/"$2}'`
else if ( $COMP == "T" || $COMP == "Z"  ) then
set flag_textphase = "n"
endif
breaksw
case SHgroup:
set Phaselist = `echo $SHgroup`
set PHASECOLOR = 255/100/100
set wTYPE = 1.0p/$PHASECOLOR
if ( $COMP == "T" ) then
set wTYPE = `echo $wTYPE | awk -Fp/ '{ print $1*2"p/"$2}'`
else if ( $COMP == "R" || $COMP == "Z" ) then
set flag_textphase = "n"
endif


breaksw
case sSgroup:
set Phaselist = `echo $sSgroup`
set PHASECOLOR = 255/160/160
set wTYPE = 1.0p/"$PHASECOLOR"t1_3:0p
if ( $COMP == "Z") then
set flag_textphase = "n"
else if  ( $COMP == "T" || $COMP == "R"  ) then
set wTYPE = `echo $wTYPE | awk -Fp/ '{ print $1*2"p/"$2}'`
endif
breaksw
case sSVgroup:
set Phaselist = `echo $sSVgroup`
set PHASECOLOR = 255/160/160
set wTYPE = 1.0p/"$PHASECOLOR"t1_3:0p
if ( $COMP == "R" ) then
set wTYPE = `echo $wTYPE | awk -Fp/ '{ print $1*2"p/"$2}'`
else if ( $COMP == "T" || $COMP == "Z"  ) then
set flag_textphase = "n"
endif
breaksw
case sSHgroup:
set Phaselist = `echo $sSHgroup`
set PHASECOLOR = 255/160/160
set wTYPE = 1.0p/"$PHASECOLOR"t1_3:0p
if ( $COMP == "T" ) then
set wTYPE = `echo $wTYPE | awk -Fp/ '{ print $1*2"p/"$2}'`
else if ( $COMP == "R" || $COMP == "Z" ) then
set flag_textphase = "n"
endif
breaksw

case sPgroup:
set Phaselist = `echo $sPgroup`
set PHASECOLOR = 160/160/255
set wTYPE  = 1.0p/"$PHASECOLOR"t1_3:0p
if ( $COMP == "T" || $COMP == "R" ) then
set flag_textphase = "n"
endif
breaksw
case pSgroup:
set Phaselist = `echo $pSgroup`
set PHASECOLOR = 255/160/160
set wTYPE  = 1.0p/"$PHASECOLOR"t5_4:0p
if ( $COMP == "T" || $COMP == "Z" ) then
set flag_textphase = "n"
endif

breaksw
case SPgroup:
set Phaselist = `echo $SPgroup`
set PHASECOLOR = 100/255/100
set wTYPE  = 1.0p/$PHASECOLOR
if ( $COMP == "T" ) then
set flag_textphase = "n"
endif

breaksw
case pSPgroup:
set Phaselist = `echo $pSPgroup`
set PHASECOLOR = 160/255/160
set wTYPE  = 1.0p/"$PHASECOLOR"t5_4:0p
if ( $COMP == "T" ) then
set flag_textphase = "n"
endif

endsw

set iphase = 1
while ( $iphase <= $#Phaselist )
set phasename = $Phaselist[$iphase]

taup_curve -mod $MODEL -h $EZ -ph $phasename
set nline_taup = `wc -l < taup_curve.gmt `

if ($nline_taup >= 2 ) then
 if ( $flag_textphase == "y" ) then
   set drange_TC = `cat taup_curve.gmt | awk 'NR > 1 {print $1}' | minmax -C`
   set drange_TC_TEXT = `echo $drange_TC $DISTMIN $DISTMAX |  tr ' ' '\n' | sort -n | tr '\n' ' ' | awk '{print $2, $3}'`
   set ddist_PLOT = `echo $DISTMAX  $DISTMIN | awk '{printf "%d \n", $1-$2}'`
   if ( $ddist_PLOT >= 90 ) then
   if ( $phasename == "P" || $phasename == "S" ||  $phasename == "ScS" || $phasename == "ScSScS" ||  $phasename == "ScP" ||  $phasename == "SKS" ) then
       set drange_TC_TEXT =  `echo $drange_TC_TEXT | awk '{ print $1, $1+5/100*($2-$1)}'`
   else if ( $phasename == "pP" || $phasename == "pS" ) then
       set drange_TC_TEXT =  `echo $drange_TC_TEXT | awk '{ print $1+20/100*($2-$1), $2}'`
   else if ( $phasename == "SS" || $phasename == "SSS" || $phasename == "SSS" ||  $phasename == "SKKS" ||  $phasename == "SKKKS"  ) then
       set drange_TC_TEXT =  `echo $drange_TC_TEXT | awk '{ print $2-20/100*($2-$1), $2}'`
   endif
   endif
   set ddist = `echo $drange_TC_TEXT[1] $drange_TC_TEXT[2] $DISTMIN $DISTMAX $ddist0 | awk '{if ( ($2-$1)/($4-$3) < 0.3 ) {print $5/2} else {print $5}}'`

   # in linux
   #set randomnum =  `echo | awk '{ srand(systime()); print rand()}'`
   # in MAC
   #set randomnum = `random_num`
   # ------------------------------------
   set textD = `echo $drange_TC_TEXT[1] $drange_TC_TEXT[2]  $RandomNum_Array[$count] | awk '{print $3*($2-$1)+$1}' `
   @ count ++
   set trange_TC = `cat taup_curve.gmt | awk 'NR > 1 {print $2}' | minmax -C`
   set trange_TC_TEXT = `echo $trange_TC $TIMEMIN $TIMEMAX |  tr ' ' '\n' | sort -n | tr '\n' ' ' | awk '{print $2, $3}'`
   set textDlist = `echo $textDlist |  tr ' ' '\n' | sort -n | tr '\n' ' '  `
   set logic_recal = `echo $textD $textDlist | awk '{  for (i = 2; i <= NF ; ++i) if ( ($1 - $i) <= '$ddist') {print "y"} }' | head -1 `

   set ii = 1
   while ( $logic_recal == "y"  )
       #set randomnum =  `echo | awk '{ srand(systime()*'$ii'); print rand()}'`
       #set randomnum = `random_num`
       set textD = `echo $drange_TC_TEXT[1] $drange_TC_TEXT[2]  $RandomNum_Array[$count]  | awk '{print $3*($2-$1)+$1}'`
       @ count ++
       set logic_recal = `echo $textD $textDlist | awk ' function abs(x){return (((x < 0.0) ? -x : x) + 0.0)} {for (i = 2; i <= NF ; ++i) if ( abs($1 - $i) <= '$ddist') {print "y"} }' | head -1 `
       if ( $ii >= 10 ) then
           set ddist = `echo $ddist | awk '{print $1/2}'`
            set logic_recal = "n"
       endif


@ ii = $ii + 1

end #end while



    set textDlist = `echo $textDlist $textD `

    ${EXECDIR}/taupTC_text.out << ! >! textgmt.out
    taup_curve.gmt
    $textD
    $trange_TC_TEXT[1] $trange_TC_TEXT[2]
!
    cat textgmt.out | head -1 | awk '{ print "echo ",$2,$1, "12 0 22 LM '$phasename' | pstext -JX -R -G'$PHASECOLOR' -Sthicker/255 -K -O -N >> '$OUTFILE'"  }' >> pstext.temp
  endif
    if ( $phasename == "SSS" || $phasename == "PPP" ||  $phasename == "sSSS" || $phasename == "SSSS" || $phasename == "SS" || $phasename == "PP") then
       set wTYPE = `echo $wTYPE | awk -Fp/ '{ print $1/2"p/"$2}'`
    endif


    psxy taup_curve.gmt  -JX -R  -: -W$wTYPE $MGMT -K -O >> $OUTFILE

endif
@ iphase ++
end


end #end foreach GROUP

# surface wave love=6kmps rayleigh = 5kmps
if ( $DISTMIN <= 0  ) then
set DISTMIN = 2
endif
if ( $COMP == "T" ) then
    set Phasevelocity_list = ( 4.5kmps )
    set Phasename_list     = ( Love )
else if ( $COMP == "R" || $COMP == "Z" ) then
    set Phasevelocity_list = ( 4.0kmps )
    set Phasename_list     = (  Rayleigh )
else if ( $COMP == "ALL") then
    set Phasevelocity_list = ( 4.5kmps 4.0kmps )
    set Phasename_list     = ( Love Rayleigh )
endif

set iphase = 1
while ( $iphase <= $#Phasevelocity_list )

    set point1 = `taup_time -mod $MODEL -h $EZ -ph $Phasevelocity_list[$iphase] -deg $DISTMIN | awk 'NR == 6 { print $4,$1}'`
    set point2 = `taup_time -mod $MODEL -h $EZ -ph $Phasevelocity_list[$iphase] -deg $DISTMAX | awk 'NR == 6 { print $4,$1}'`
    psxy -JX -R -W2p/125/125/125 $MGMT -K -O << ! >> $OUTFILE
$point1
$point2
!
@ iphase ++
end

sort -k 2 -nr  pstext.temp | csh

set iphase = 1
while ( $iphase <= $#Phasevelocity_list )
   set iDISTMAX = `echo $DISTMAX | awk '{printf "%d\n",$1}'`
   if ( $iDISTMAX > 110 ) then
      set point2 = `taup_time -mod $MODEL -h $EZ -ph $Phasevelocity_list[$iphase] -deg 110  | awk -v R=$RandomNum_Array[$count] 'NR == 6 { print $4/2+$4*R/2,$1/2+$1*R/2}'`
      @ count ++
   else
      set point2 = `taup_time -mod $MODEL -h $EZ -ph $Phasevelocity_list[$iphase] -deg $DISTMAX  | awk -v R=$RandomNum_Array[$count] 'NR == 6 { print $4/2+$4*R,$1/2+$1*R}'`
      @ count ++
   endif

   pstext -JX -R -G125/125/125 -Sthicker/255 -K -O -N << EOF >> $OUTFILE
$point2 12 0 22 LM $Phasename_list[$iphase]
EOF
@ iphase ++
end #end while $iphase
pstext -JX -R -O  << ! >> $OUTFILE
!

# clean up
\rm pstext.temp taup_curve.gmt textgmt.out IINFIL
# \rm taupTC_text
/bin/rm -rf  $DIRDATA/$EVENT/TC

# message to screen we're done this this file
echo "c99.TraveltimeCurve: just finished making PLOT FILE : $OUTFILE"

# return to our pwd
cd $DIRPWD

#EOF
