#!/bin/csh
# EJG/PL March 2010
# 
#===========================================================
#                c13.radpat_piercings
#===========================================================
# this script makes 12 little lower hemisphere radiation
# pattern plots with the piercing locations of a subjective
# choice of seismic phases (easily modified)
# Here, we assume that the c12.radiation_pat script has
# already been run (to make the output for the radiation
# patterns).
#
# this script & code are an adaptation of source material
# written by CHUNPENG ZHAO for our Observation Seismology
# at ASU in Fall 2008.
#
# the main task here is to get ray parameters for
# various phases for the azimuths and  distances of
# the stations we have here, the we need to
# convert ray parameter take off angle, then plot
#
# we will be quick/dirty, and make all take off angles
# from scratch
#
# we need to first get the strike dip and rake from 
# somewhere.  For sure, you should be able to get it from:
# http://www.globalcmt.org/CMTsearch.html

# INPUT:  (1) station/event location info and distances from
# -----       master info file
#         (2) strike, dip, rake
#         (3) a radiation pattern files made from
#             the script named c08.radiation_pat, named
#             P_radiation, SV_radiation, SH_radiation
#         (4) some directory location information

echo " "
echo "-------------------------------------------------------------"
echo "                c13.radpat_piercings:     STARTING "
echo "-------------------------------------------------------------"

set EVENT     = $1
set DIRSRC    = $2
set DIRDATA   = $3
set DIRPLOT   = $4
set strike    = $5
set dip       = $6
set rake      = $7

# OUTPUT:  (1) a postscript plot with 12 beach balls and
# -----        phases of interest piercing points. 
#          (2) an information file eventStation.rad_info
#              that contains predicted radiation pattern
#              for the specific phases of interest defined
#              in this script (for the rad pat, P, SV or
#              SH, also defined in this script)

# define the output filename
set OUTFILE = $DIRPLOT/$EVENT.c13.radpat_12piercings.ps

# go to the data directory
set DIRPWD = ` pwd `
cd $DIRDATA/$EVENT

# source our env variable script

# define the master file location / name
set MASTER = $DIRDATA/$EVENT/eventStation.$EVENT

# compfile f90 code to give rad pat amp for
# station theta, az for phase list, to go into
# the rad_info file
$FCOMP $DIRSRC/radiation_th,az.f -o RADTHAZ

# loose header line for input file
awk ' NR>1 {print $0}'  $MASTER >! INFIL

# define event coords and mag
set COORDS = ` awk ' NR==1 {print $11,$12,$13,$16}' INFIL `
set NSTA   = ` wc -l INFIL | awk '{print $1}' `
set ELAT   = $COORDS[1] 
set ELON   = $COORDS[2] 
set EZ     = $COORDS[3] 
# set EZ     = `echo $COORDS[3] | awk '{ print $1/1000.0 }'`
set EMAG   = $COORDS[4] 

# deg 2 rad
set rad2deg = 57.2957795

# radius of source depth
set ER = ` echo $EZ | awk '{print 6371.0 - $1}' `

# we'll need Vp and Vs at the event depth, in order
# to compute take-off angle from ray parameter.
# we'll use a super decimated PREM model.
set REFMOD = $DIRSRC/PREM_Z,Vp,Vs
set VP = ` awk '$1>='$EZ'-0.05 && $1<='$EZ'+0.05 {print $2}' $REFMOD | awk 'NR==1' `
set VS = ` awk '$1>='$EZ'-0.05 && $1<='$EZ'+0.05 {print $3}' $REFMOD | awk 'NR==1' `

# we'll proceed as follows: grab the station & 
# and dist info from the INFIL, and run taup_time,
# which gives us ray parameter.  for each phase
# of interest to be plotted on a rad pat, we will
# build a separate file of the output info (since
# not every phase will be geometrically expected
# at every distance/station). Once that is done,
# we can proceed to make the plot panels, one at
# a time. 
#
# this script is hardwired to make 12 little 
# radiation patterns. thus we will make 12 tmp
# files: one per phase

# PHASE LIST (subjective, i admit!)
# if you wish to change phases or rad pats, it
# should happen here: change entries in the X or COMP
# variables.  just make sure taup understands the names
# and that you always have 12 entries on each line!
set X    = ( P,Pdiff PcP PP PKiKP PKP PKPPKP S,Sdiff S,Sdiff SS ScS SKS SKKS )
set COMP = ( P       P   P  P     P   P      SH      SV      SH SH  SV  SV   )

# some scripting madness:
set PHASES = $X[1],$X[2],$X[3],$X[4],$X[5],$X[6],$X[7],$X[8],$X[9],$X[10],$X[11],$X[12]
set nPHASES = 12

# initiate the eventStation.rad_info file:
# first line is
echo $X[1]_$COMP[1] x x $X[2]_$COMP[2] x x $X[3]_$COMP[3] x x $X[4]_$COMP[4] x x \
     $X[5]_$COMP[5] x x $X[6]_$COMP[6] x x $X[7]_$COMP[7] x x $X[8]_$COMP[8] x x \
     $X[9]_$COMP[9] x x $X[10]_$COMP[10] x x $X[11]_$COMP[11] x x $X[12]_$COMP[12] x x \
     >! eventStation.$EVENT.rad_info

# initiate all temporary phase files:
@ m = 1
while($m <= $nPHASES)
   echo $X[$m] >! phase.$X[$m]_$COMP[$m]
   echo $X[$m] $COMP[$m] >! radiation.$X[$m]_$COMP[$m]
   @ m++
end

echo "c13.radpat_piercings: calculating take-off angles "
# outer loop: STATIONS
@ i = 1
while($i <= $NSTA)
   # grab info for the station
   set ISTA = ( ` awk ' NR=='$i' {print $3,$5,$9,$10} ' INFIL ` )
   set DIST = $ISTA[1] 
   set AZ   = $ISTA[2] 
   set SLAT = $ISTA[3] 
   set SLON = $ISTA[4] 
   # grab the phase names and ray parameter, put into tmp file:
   taup_time -mod prem -evt $ELAT $ELON -h $EZ -deg $DIST \
       -sta $SLAT $SLON  -ph $PHASES | awk ' NR>5 {print $3,$5}' \
       >! taup.tmp

   # inner loop: make/add to phase files
   @ j = 1
   while($j <= $nPHASES)
       if(-e phase.tmp) \rm phase.tmp

       # define P or S vel
       set TYPE = `echo $X[$j] | cut -c1`
       if($TYPE == P ) set VEL = $VP
       if($TYPE == S ) set VEL = $VS

       # only pain is to deal w/ the "P,Pdiff" and "S,Sdiff" names,
       # since we have to search for P or Pdiff, and S or Sdiff.
       # i named them the way they are named, so taup will always
       # return one or the other. [we don't know if our station is
       # before diffraction or not, so we ask taup for both, and
       # get the correct one back. ]
       @ FLG = 0
       if ($X[$j] == P,Pdiff ) then
          set phase = P
          set phaseB = Pdiff
          @ FLG = 1
       else if ($X[$j] == S,Sdiff ) then
          set phase = S
          set phaseB = Sdiff
          @ FLG = 1
       else
          set phase = $X[$j]
       endif
     
       # for the non-diffracted phases:
       # we will keep only the first occurrance (i.e., neglect
       # multiple returns of same phase, like triplications or
       # major arc phases). stick ray param in file
       grep $phase taup.tmp | awk 'NR==1 {print $0}' >! grep.tmp

       # we need to make sure we are not grabbing wrong things
       # (like PKPPKP for PKP, if the former exists and the latter
       # doesn't!)
       set grepphase = ` awk '{print $1}' grep.tmp `
       if($phase == $grepphase ) then
           grep $phase taup.tmp | awk 'NR==1 {print $2}' >! phase.tmp
       else
           grep COMPLETECRAP taup.tmp >! phase.tmp
       endif

       # make sure something is in the file
       @ CHECK  = ` wc -l phase.tmp | awk '{ print $1}' `
       @ CHECKd = 0

       # if we have info, calc the take off angle, and
       # write all the necessary info to the phase file
       if($CHECK == 1 ) then
            awk '{print $0}' phase.tmp >! RAYPAR
            # take off angle from our beloved snell's law
            gmtmath RAYPAR -C0 $VEL MUL $ER DIV $rad2deg MUL ASIN = ANGLE
            # finally, we arrive at our angle:
            set THETA = ` awk '{print '$rad2deg'*$1}' ANGLE `
            # add take off angle and azimuth into its phase file
            echo $THETA $AZ >>!  phase.$X[$j]_$COMP[$j]
            # run our RADTHAZ code.  first make input. then run.
            # then def our AMP variable.
            echo $strike $dip $rake >! in.RADTHAZ
            echo $COMP[$j] >> in.RADTHAZ
            echo $THETA $AZ >> in.RADTHAZ
            RADTHAZ < in.RADTHAZ >! out.RADTHAZ
            set AMP = ` cat out.RADTHAZ `
            # write same info in an output file for possible later use:
            echo $THETA $AZ $AMP | awk '{ printf "%5.1f %5.1f %7.3f\n", $1,$2,$3}' \
                >>!  radiation.$X[$j]_$COMP[$j]
       endif

       # now, if diffraction is a possibility, look for it
       if( $FLG == 1 ) then
          set phase = $phaseB
          grep $phase taup.tmp | awk 'NR==1 {print $2}' >! phase.tmp

          # make sure something is in the file
          @ CHECKd = ` wc -l phase.tmp | awk '{ print $1}' `

          # if we have info, calc the take off angle, and
          # write all the necessary info to the phase file
          if($CHECKd == 1 ) then
               awk '{print $0}' phase.tmp >! RAYPAR
               # take off angle from our beloved snell's law
               gmtmath RAYPAR -C0 $VEL MUL $ER DIV $rad2deg MUL ASIN = ANGLE
               # finally, we arrive at our angle:
               set THETA = ` awk '{print '$rad2deg'*$1}' ANGLE `
               # add take off angle and azimuth into its phase file
               echo $THETA $AZ >>!  phase.$X[$j]_$COMP[$j]
               # run our RADTHAZ code.  first make input. then run.
               # then def our AMP variable.
               echo $strike $dip $rake >! in.RADTHAZ
               echo $COMP[$j] >> in.RADTHAZ
               echo $THETA $AZ >> in.RADTHAZ
               RADTHAZ < in.RADTHAZ >! out.RADTHAZ
               set AMP = ` cat out.RADTHAZ `
               # write same info in an output file for possible later use:
               echo $THETA $AZ $AMP | awk '{ printf "%5.1f %5.1f %7.3f\n", $1,$2,$3}' \
                   >>!  radiation.$X[$j]_$COMP[$j]
          endif
       endif

       # if we never found the phase (for cases where phase was not 
       # geometrically possible, i.e., not found by taup, write a null
       # into our "later use" info file
       if($CHECK == 0 && $CHECKd == 0 ) then
            echo "null" $AZ "null" >>!  radiation.$X[$j]_$COMP[$j]
       endif
    
       @ j++   # increment for next phase of interest search
   end         # ending the phase loop

   @ i++       # increment to next station
end            # ending the station loop
\rm RADTHAZ in.RADTHAZ out.RADTHAZ


# now, combine our radiation calculations for each station into the big
# rad_info file.  so, this info is not really being used, but i plan on
# using it in a script to flip polarities in zoom plots (perhaps).
paste radiation.$X[1]_$COMP[1] radiation.$X[2]_$COMP[2] radiation.$X[3]_$COMP[3] \
      radiation.$X[4]_$COMP[4] radiation.$X[5]_$COMP[5] radiation.$X[6]_$COMP[6] \
      radiation.$X[7]_$COMP[7] radiation.$X[8]_$COMP[8] radiation.$X[9]_$COMP[9] \
      radiation.$X[10]_$COMP[10] radiation.$X[11]_$COMP[11] radiation.$X[12]_$COMP[12] \
      >! radi.tmp
mv eventStation.$EVENT.rad_info headtmp
cat headtmp radi.tmp >!  eventStation.$EVENT.rad_info
\rm headtmp radi.tmp
# get rid of a silly extra line (lazy)
awk ' NR==1 {print $0}' eventStation.$EVENT.rad_info >! top
awk ' NR>2 {print $0}' eventStation.$EVENT.rad_info >! bot
cat top bot >! eventStation.$EVENT.rad_info
\rm top bot


# ===========================================
#                   plotting time!
#        ...thought i'd never get here!
# ===========================================

echo "c13.radpat_piercings: MAKING THE PLOT FILE"

# make a color palette table for underlying rad pat
makecpt -Cpolar -T-1/1/0.02 -I -Z >! RAD.cpt
gmtset COLOR_NAN 0/0/0

# set some global parameters
# size of beach balls
set SIZE = 1.4i
# x origin
set X0 = 1.3i
# y origin
set Y0 = 7.2i
# x and y shifting in plots between beach balls
# brute force: an array, one DX & DY for each ball
set DX = ( 0 2 2 -4 2 2 -4 2 2 -4 2 2 )
set DY = ( 0 0 0 -2 0 0 -2 0 0 -2 0 0 )

# convert the output of radiation.f, i.e., ASCII
# radiation pattern info, to GMT's grd file format, for plotting
foreach cmp ( P SH SV )
   xyz2grd $EVENT.${cmp}_radiation -G${cmp}.grd -A -I1/1 -R0/360/0/90
end

# text labels
# break apart event name for Big Title:
set YYYY = ` echo $EVENT | cut -c1-4 `
set MM   = ` echo $EVENT | cut -c5-6 `
set DD   = ` echo $EVENT | cut -c7-8 `
set HH   = ` echo $EVENT | cut -c9-10 `
set MIN  = ` echo $EVENT | cut -c11-12 `

# now the plotting will happen in a loop from 1 to 12 for
# our 12 beach balls

# define our projection and starting position
psbasemap  -R0/360/0/90 -JPa$SIZE -B0 -X$X0 -Y$Y0 -P -K >! $OUTFILE

@ ball = 1
while ($ball <= 12)  # while loop: one beach ball for each "$ball"

   # background radiation pattern:
   grdimage $COMP[$ball].grd -R -JP -X$DX[$ball]i -Y$DY[$ball]i -CRAD.cpt -P -K -O  >> $OUTFILE
   echo "0.0 C" >! CONT
   # contour line at radiation amp = zero
   grdcontour $COMP[$ball].grd -R -JP -CCONT -W1/150 -P -K -O >> $OUTFILE
   # count the stations for each phase type:
   set NP = ` wc phase.$X[$ball]_$COMP[$ball] | awk '{print $1-1}' `
   echo "0 90 15 0 5 CB $X[$ball] ($COMP[$ball], n=$NP) " >! text.tmp
   # title text of each beach ball:
   pstext text.tmp -R -JP -N -Y0.2i -P -K -O >> $OUTFILE
   # tick marks on balls:
   psbasemap  -R -JP -Bf15wsne -Y-0.2i -P -K -O  >> $OUTFILE
   awk ' NR>1 {print $2,$1}' phase.$X[$ball]_$COMP[$ball] >! theta,az.tmp
   # add piercing points:
   psxy  theta,az.tmp -R -JP -Sc0.04i -G0 -P -K -O >> $OUTFILE

   @ ball++

end

# text at the top of page
pstext  -R0/5/0/5 -JX5i -N -O -P -X-6i -Y3.8i -K << EOF  >> $OUTFILE
4.5 5    16 0 4 CB Radiation patterns and ray piercing points: $EVENT
4.5 4.75 16 0 4 CB Lat: $ELAT Lon: $ELON Dep:$EZ km Mag: $EMAG 
4.5 4.5  16 0 4 CB Focal Mech: Strike=$strike Dip=$dip Rake=$rake
EOF

# more text: script name and time stamp
echo "4.5 4.25 16 0 4 CB SCRIPT: c11.profile_big_TA" >! datetag1
date "+CREATION DATE: %m/%d/%y  %H:%M:%S" >! datetag2
paste datetag1 datetag2 >! datetag3
pstext datetag3 -JX -R -N -G0 -O >> $OUTFILE

# clean up
\rm taup.tmp INFIL phase.tmp RAYPAR ANGLE 
\rm .gmt* grep.tmp text.tmp theta,az.tmp
\rm phase.* CONT {P,SV,SH}.grd RAD.cpt
\rm radiation.P,Pdiff_* radiation.PcP_* radiation.PKiKP_*
\rm radiation.PKP_* radiation.PKPPKP_* radiation.S,Sdiff_* 
\rm radiation.SS_* radiation.ScS_* radiation.SKS_* radiation.SKKS_*
\rm radiation.PP_* datetag?

# return to our pwd
cd $DIRPWD

echo "-------------------------------------------------------------"
echo "                c13.radpat_piercings:     DONE "
echo "-------------------------------------------------------------"
echo " "


#EOF
