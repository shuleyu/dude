#!/bin/csh
# EJG/PL March 2010
#
#===========================================================
#                     c02.map_master
#===========================================================
# this script uses GMT to plot a "master" map.
# i acknowledge the subjective choice in maps,
# but the choices are easily changed or deleted
# or augmented, based on one's needs. These
# were chosen to emphasize how distance between
# event and stations can be emphasized/
# codes use are GMT and tauP toolkit

set ShellName = `basename $0`

echo " "
echo "-------------------------------------------------------------"
echo "                ${ShellName}:     STARTING "
echo "-------------------------------------------------------------"

# INPUT: station and event info from our master file

set EVENT     = $1
set DIRSRC    = $2
set DIRDATA   = $3
set DIRPLOT   = $4

# OUTPUT: a postscript plot

set OUTFILE = $DIRPLOT/$EVENT.${ShellName}.ps


# go to the data directory
set DIRPWD = ` pwd `
cd $DIRDATA/$EVENT

# define the master file location / name
set MASTER = $DIRDATA/$EVENT/eventStation.$EVENT

# make our file sans header line:
awk ' NR>1 {print $0}'  $MASTER >! INFIL

# define event coords and mag
set COORDS = ` awk ' NR==1 {print $11,$12,$13,$16}' INFIL `
set NSTA   = ` wc -l INFIL | awk '{print $1}' `
set ELAT   = $COORDS[1]
set ELON   = $COORDS[2]
set EZ     = $COORDS[3]
set EMAG   = $COORDS[4]

# make an event lat/lon file:
echo $ELAT $ELON >! xy.eq

# make a bunch of station lat/lon files to be used
# for our color scheme of different distance ranges
# plot as different colors (kinda brute force):
awk ' $3<20             {print $9,$10 }' INFIL >! xy.stations_0-20
awk ' $3>=20  && $3<40  {print $9,$10 }' INFIL >! xy.stations_20-40
awk ' $3>=40  && $3<60  {print $9,$10 }' INFIL >! xy.stations_40-60
awk ' $3>=60  && $3<80  {print $9,$10 }' INFIL >! xy.stations_60-80
awk ' $3>=80  && $3<100 {print $9,$10 }' INFIL >! xy.stations_80-100
awk ' $3>=100 && $3<120 {print $9,$10 }' INFIL >! xy.stations_100-120
awk ' $3>=120 && $3<140 {print $9,$10 }' INFIL >! xy.stations_120-140
awk ' $3>=140 && $3<160 {print $9,$10 }' INFIL >! xy.stations_140-160
awk ' $3>=160           {print $9,$10 }' INFIL >! xy.stations_160-180
awk '                   {print $9,$10 }' INFIL >! xy.stations

# great circle path files:
# make the files that will contain the event lat/lon and station
# lat/lon and the GMT delimeter (">") for our great circle paths
foreach distrange ( '0-20' '20-40' '40-60' '60-80' '80-100' '100-120' '120-140' '140-160' '160-180' )
    if (-e xy.gcpaths_$distrange ) \rm xy.gcpaths_$distrange
    set npaths = ` wc -l xy.stations_$distrange | awk '{print $1}' `
    # loop thru, one station at a time in each file, and make the input:
    @ m = 1
    while ( $m <= $npaths )
        echo '>' >>! xy.gcpaths_$distrange
        echo $ELAT $ELON >>! xy.gcpaths_$distrange
        awk ' NR=='$m' {print $0} ' xy.stations_$distrange >>! xy.gcpaths_$distrange
        @ m++
    end
end

# define the GMT plot bounds and size:
set REG = -R0/360/-90/90
set PROJ = -JR$ELON/7.0i

# first plot the coast lines
pscoast $REG $PROJ -Ba0g45/a0g45wsne -Dl -A40000 -W3/100/100/100 \
   -G200/200/200 -X0.70i -Y5.5i -V -P -K >! $OUTFILE

# now we'll plot the GCP files, each one a different color.

# first, our color scheme, from shortest (1) to largest (9) distance range:
set RGB1 = '30/30/30'
set RGB2 = '0/0/250'
set RGB3 = '0/130/255'
set RGB4 = '250/0/250'
set RGB5 = '120/250/250'
set RGB6 = '130/250/0'
set RGB7 = '255/255/0'
set RGB8 = '250/180/0'
set RGB9 = '250/0/0'

# now plot the GCPs, testing for the existence of the
# input file (since we may not have all the ranges filled):
if(-e xy.gcpaths_160-180)then
   psxy xy.gcpaths_160-180 $REG $PROJ -: $MGMT -K -O -W0.5/$RGB9 >> $OUTFILE
endif
if(-e xy.gcpaths_140-160)then
   psxy xy.gcpaths_140-160 $REG $PROJ -: $MGMT -K -O -W0.5/$RGB8 >> $OUTFILE
endif
if(-e xy.gcpaths_120-140)then
   psxy xy.gcpaths_120-140 $REG $PROJ -: $MGMT -K -O -W0.5/$RGB7 >> $OUTFILE
endif
if(-e xy.gcpaths_100-120)then
   psxy xy.gcpaths_100-120 $REG $PROJ -: $MGMT -K -O -W0.5/$RGB6 >> $OUTFILE
endif
if(-e xy.gcpaths_80-100)then
   psxy xy.gcpaths_80-100  $REG $PROJ -: $MGMT -K -O -W0.5/$RGB5 >> $OUTFILE
endif
if(-e xy.gcpaths_60-80)then
   psxy xy.gcpaths_60-80   $REG $PROJ -: $MGMT -K -O -W0.5/$RGB4 >> $OUTFILE
endif
if(-e xy.gcpaths_40-60)then
   psxy xy.gcpaths_40-60   $REG $PROJ -: $MGMT -K -O -W0.5/$RGB3 >> $OUTFILE
endif
if(-e xy.gcpaths_20-40)then
   psxy xy.gcpaths_20-40   $REG $PROJ -: $MGMT -K -O -W0.5/$RGB2 >> $OUTFILE
endif
if(-e xy.gcpaths_0-20)then
   psxy xy.gcpaths_0-20    $REG $PROJ -: $MGMT -K -O -W0.5/$RGB1 >> $OUTFILE
endif

# now plot the EQ and stations
psxy xy.eq       $REG $PROJ -: -Sa0.12i -K -O -W1/0/0/0 -G0 >> $OUTFILE
psxy xy.stations $REG $PROJ -: -St0.03i -K -O -W1/0/0/0 -G0 >> $OUTFILE

# use GMT's pstext to to plot the text of the title,
# also, plot a big title at top of page:
# first, break apart event name for Big Title:
set YYYY = ` echo $EVENT | cut -c1-4 `
set MM   = ` echo $EVENT | cut -c5-6 `
set DD   = ` echo $EVENT | cut -c7-8 `
set HH   = ` echo $EVENT | cut -c9-10 `
set MIN  = ` echo $EVENT | cut -c11-12 `

# plot a title above the top of the globe
# and plot a big title of the date higher up:
# big title first
pstext $REG $PROJ -N -O -K -Y0.8i << END >> $OUTFILE
$ELON 90 20 0 0 CB ${MM}/${DD}/$YYYY ${HH}:${MIN}
END
# now littler title:
pstext $REG $PROJ -N -O -K -Y-0.6i << END >> $OUTFILE
$ELON 90 14 0 0 CB $EVENT  LAT=$ELAT LON=$ELON Z=$EZ Mb=$EMAG NSTA=$NSTA
END

# Plot the legend in true brute force fashion:
set YSHIFT = '0.25i'
psxy -JX3.0i -R0/5/0/5 -X3.0i -Y-4.0i -K -O -W2.0/$RGB9 << END  >> $OUTFILE
0 5
1 5
END
pstext -JX -R -N -O -K << END >> $OUTFILE
1.2 5.0 10 0 0 LM 160-180 deg
END
#----
psxy -JX3.0i -R0/5/0/5 -K -O -W2.0/$RGB8 -Y-$YSHIFT << END  >> $OUTFILE
0 5
1 5
END
pstext -JX -R -N -O -K << END >> $OUTFILE
1.2 5.0 10 0 0 LM 140-160 deg
END
#----
psxy -JX3.0i -R0/5/0/5 -K -O -W2.0/$RGB7 -Y-$YSHIFT << END  >> $OUTFILE
0 5
1 5
END
pstext -JX -R -N -O -K << END >> $OUTFILE
1.2 5.0 10 0 0 LM 120-140 deg
END
#----
psxy -JX3.0i -R0/5/0/5 -K -O -W2.0/$RGB6 -Y-$YSHIFT << END  >> $OUTFILE
0 5
1 5
END
pstext -JX -R -N -O -K << END >> $OUTFILE
1.2 5.0 10 0 0 LM 100-120 deg
END
#----
psxy -JX3.0i -R0/5/0/5 -K -O -W2.0/$RGB5 -Y-$YSHIFT << END  >> $OUTFILE
0 5
1 5
END
pstext -JX -R -N -O -K << END >> $OUTFILE
1.2 5.0 10 0 0 LM 80-100 deg
END
#----
psxy -JX3.0i -R0/5/0/5 -K -O -W2.0/$RGB4 -Y-$YSHIFT << END  >> $OUTFILE
0 5
1 5
END
pstext -JX -R -N -O -K << END >> $OUTFILE
1.2 5.0 10 0 0 LM 60-80 deg
END
#----
psxy -JX3.0i -R0/5/0/5 -K -O -W2.0/$RGB3 -Y-$YSHIFT << END  >> $OUTFILE
0 5
1 5
END
pstext -JX -R -N -O -K << END >> $OUTFILE
1.2 5.0 10 0 0 LM 40-60 deg
END
#----
psxy -JX3.0i -R0/5/0/5 -K -O -W2.0/$RGB2 -Y-$YSHIFT << END  >> $OUTFILE
0 5
1 5
END
pstext -JX -R -N -O -K << END >> $OUTFILE
1.2 5.0 10 0 0 LM 20-40 deg
END
#----
psxy -JX3.0i -R0/5/0/5 -K -O -W2.0/$RGB1 -Y-$YSHIFT << END  >> $OUTFILE
0 5
1 5
END
pstext -JX -R -N -O -K << END >> $OUTFILE
1.2 5.0 10 0 0 LM 0-20 deg
END
#----
# script name and time stamp next:
#----
echo "0.0 4.2 10 0 0 LM SCRIPT: ${ShellName}" >! datetag1
date "+CREATION DATE: %m/%d/%y  %H:%M:%S" >! datetag2
paste datetag1 datetag2 >! datetag3
pstext datetag3 -JX -R -N -Wored -G0 -O -X-1.5i -Y-$YSHIFT >> $OUTFILE

echo "${ShellName}: just finished making PLOT FILE = $OUTFILE"

# some clean up
\rm xy.eq xy.station* xy.gcpaths* .gmt*  INFIL datetag?

# return to our pwd
cd $DIRPWD

echo "-------------------------------------------------------------"
echo "                ${ShellName}:     DONE "
echo "-------------------------------------------------------------"
echo " "

#EOF
